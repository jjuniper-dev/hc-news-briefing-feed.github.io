‚úÖ Morning News Briefing ‚Äì September 28, 2025 10:40

üìÖ Date: 2025-09-28 10:40
üè∑Ô∏è Tags: #briefing #ai #publichealth #digitalgov

‚∏ª

üßæ Weather
‚Ä¢ Current Conditions:  15.6¬∞C
  Temperature: 15.6&deg;C Pressure / Tendency: 101.3 kPa rising Humidity: 90 % Dewpoint: 14.0&deg:C Wind: WNW 10 km/h . Air Quality Health Index: n/a . Pembroke 6:00 AM EDT Sunday 28 September 2025 . Weather forecast: 15/6¬∞C Pem
‚Ä¢ Sunday: Clearing. High 21.
  Fog patches dissipating this morning. Clearing this morning . High 21. UV index 4 or moderate. High 21 or moderate for the day . Forecast issued 5:00 AM EDT Sunday 28 September 2025. Forecast also issued Monday morning. Weather forecast: Monday morning, Tuesday afternoon, Tuesday night . Weather in the forecast: Tuesday night, Wednesday morning, Wednesday night, Thursday morning
‚Ä¢ Sunday night: Clear. Low 7.
  Fog patches developing overnight . Clear. Clear. Low 7.70s . Clear . Fog patches expected overnight . Forecast issued 5:00 AM EDT Sunday 28 September 2025 . Forecasts: Clear, sunny, cloudy, chilly, breezy, sunny and breezy in the coming days . Weather forecast: Clear and sunny, sunny skies, sunny sunny, breezing through the night .

üåç International News
No updates.

üçÅ Canadian News
No updates.

üá∫üá∏ U.S. Top Stories
‚Ä¢ The endangered cactus behind Mexico's sweet secret
  A candied barrel cactus called biznaga is now illegal in Mexico because it's vanishing in the wild . The cactus is a key ingredient in Mexico's famous chiles-en-nogada . It's now illegal to use the cactus as an ingredient in chiles and chiles in the nogada, but it's also illegal to eat it .
‚Ä¢ DACA has bipartisan support in Congress. Still, Republicans are following Trump's lead
  President Trump failed to revoke DACA in his first term and his focus on immigration this time has mostly ignored the policy . Still, Republican lawmakers are deferring to the president on the issue . Republican lawmakers have largely ignored the immigration policy in their first term . Republicans continue to defer to the White House on the matter of the issue of protecting DACA from the Obama administration in the U.S.
‚Ä¢ Why friends are teaming up to buy homes
  As home prices skyrocket, many Americans are buying homes with someone who isn't their romantic partner . Buying a home is a conventional milestone for couples, but as home prices have skyrocketed, it's increasingly common for couples to buy a home with someone not their partner . The average cost of a home in the U.S. is $1.5 million . The cost of buying
‚Ä¢ Large Russian drone and missile attack on Kyiv kills 4 and wounds at least 10
  Ukrainian President Volodymyr Zelenskyy said the large-scale attacks involved nearly 500 strike drones . Ukraine's president said the attack was carried out by nearly 500 drones . The drone attacks were carried out in Ukraine by around 500 drones, the president said . The attacks were conducted by about 500 drones in total, according to the president of Ukraine's armed forces and the government .
‚Ä¢ Stampede at a political rally for popular actor Vijay in southern India kills 36, injures 40
  A stampede at a rally for a popular Indian actor and politician in the southern state of Tamil Nadu killed at least 36 people and injured 40 others . At least 40 others were injured in the stampede in Tamil Nadu . The stampede took place in the state's southern state, Tamil Nadu, in the south of India's Tamil Nadu state . The rally was being held for actor and

üß† Artificial Intelligence
No updates.

üíª Digital Strategy
‚Ä¢ Trump‚Äôs tariff‚Äëshaped stick can‚Äôt beat reality on US chip fabbing
  The proposed 1:1 chip rule means nothing but pain for US tech until he‚Äôs out of office . Ending America's reliance on foreign chip fabs remains a high priority for Uncle Sam . But the Trump administration's "my way or the highway" approach to the issue threatens to do more harm than good .‚Ä¶‚Ä¶‚Ä¶ The proposed chip rule threatens to hurt the U.
‚Ä¢ Hunt for RedNovember: Beijing hacked critical orgs in year-long snooping campaign
  RedNovember, a Chinese state-sponsored cyberspy group, targeted government and critical private-sector networks around the globe between June 2024 and July 2025 . The group exploited buggy internet-facing appliances to deploy a Go-based backdoor called Pantegana and other offensive security tools, including Cobalt Strike and SparkRAT . RedNovember is the latest in a series of reports of
‚Ä¢ Alibaba unveils $53B global AI plan ‚Äì but it will need GPUs to back it up
  Chinese giant maps out datacenters across Europe and beyond, yet US chip curbs cast a long shadow . Alibaba opened an AI war chest containing tens of billions of dollars . But it also prompted a flurry of questions over how it will achieve all this in an increasingly fragmented IT landscape, when critical resources are in short supply . Alibaba has plans for AI datacacenters in Europe and
‚Ä¢ Many employees are using AI to create 'workslop,' Stanford study says
  Workers are getting lazy about using AI to do their jobs for them, and the results are both costly and increasing distrust in the workplace . Remember when AI was supposed to make us more productive, not hate each other? ai-pocalypse? Workers are becoming more reliant on AI to make them more productive and more distrustful of each other, says John Defterios . Workers are
‚Ä¢ Cyber threat-sharing law set to shut down, along with US government
  US federal government would shut down on October 1 unless a continuing resolution passes . 2015 Cybersecurity Information Sharing Act would lapse at the same time, threatening what many consider a critical plank of U.S. cybersecurity policy . Act passed in 2015 is due to lapse unless a resolution passes - and that's unlikely . US cybersecurity policy is critical to the nation's ability to respond to cyberattacks .

üè• Public Health
No updates.

üî¨ Science
‚Ä¢ Disparities in delivery hospital risk-adjusted outcomes for very low birthweight infants: the role of NICU volume and level of care
  CNN.com will feature iReporter photos in a weekly Travel Snapshots gallery . Please submit your best shots of our featured destinations for next week . Visit CNN iReport.com/Travel next Wednesday for a new gallery of snapshots . Visit www.dailyimpact.com for a gallery next week for snapshots of places to go next week in the gallery . Submit photos of your favorite destinations
‚Ä¢ ‚Äú30 years of global collaboration in transplantation and cellular therapy: WMDA‚Äôs commitment to donor safety, ethical standards, and equitable access‚Äù
  CNN.com will feature iReporter photos in a weekly Travel Snapshots gallery . Please submit your best shots of our featured destinations for next week . Visit CNN iReport.com/Travel next Wednesday for a new gallery of snapshots . Visit www.dailyimpact.com for a gallery next week for snapshots of places to go next week in the gallery . Submit photos of your favorite destinations
‚Ä¢ Quantifying the impact of a broadly protective sarbecovirus vaccine in a future SARS-X pandemic
  CNN.com will feature iReporter photos in a weekly Travel Snapshots gallery . Please submit your best shots of our featured destinations for next week . Visit CNN iReport.com/Travel next Wednesday for a new gallery of snapshots . Visit www.dailyimpact.com for a gallery next week for snapshots of places to go next week in the gallery . Submit photos of your favorite destinations
‚Ä¢ Impact of capitation payment on vascular complications among treated diabetic patients in China
  CNN.com will feature iReporter photos in a weekly Travel Snapshots gallery . Please submit your best shots of our featured destinations for next week . Visit CNN iReport.com/Travel next Wednesday for a new gallery of snapshots . Visit www.dailyimpact.com for a gallery next week for snapshots of places to go next week in the gallery . Submit photos of your favorite destinations
‚Ä¢ Applying the SFIC synergistic governance model to analyze determinants of multisectoral collaborative chronic disease management in Beijing‚Äôs district H
  CNN.com will feature iReporter photos in a weekly Travel Snapshots gallery . Please submit your best shots of our featured destinations for next week . Visit CNN iReport.com/Travel next Wednesday for a new gallery of snapshots . Visit www.dailyimpact.com for a gallery next week for snapshots of places to go next week in the gallery . Submit photos of your favorite destinations

üßæ Government & Policy
No updates.

üèõÔ∏è Enterprise Architecture & IT Governance
No updates.

ü§ñ AI & Emerging Tech
‚Ä¢ US investigators are using AI to detect child abuse images made by AI
  The Department of Homeland Security awarded a $150,000 contract to San Francisco-based Hive AI for its AI detection algorithms for child sexual abuse material . The filing quotes data from the National Center for Missing and Exploited Children that reported a 1,325% increase in incidents involving generative AI in 2024 . A tool that could successfully flag real victims would be a massive help when they try to prioritize cases .
‚Ä¢ The Download: shoplifter-chasing drones, and Trump‚Äôs TikTok deal
  Shoplifters in the US could soon be chased down by drones



The news: Flock Safety, whose drones were once reserved for police departments, is now offering them for private-sector security, the company has announced. Potential customers include businesses trying to curb shoplifting.&nbsp;



How it works: If the security team at a store sees shoplifters leave, they can activate a camera-equipped drone. ‚ÄúThe drone follows the people. The people get in a car. You click a button and you track the vehicle with the drone, and the drone just follows the car,‚Äù says Keith Kauffman, a former police chief who now directs Flock‚Äôs drone program. The video feed of that drone might go to the company‚Äôs security team, but it could also be automatically transmitted directly to police departments.&nbsp;



The response: Flock‚Äôs expansion into private-sector security is ‚Äúa logical step, but in the wrong direction,‚Äù says Rebecca Williams, senior strategist for the ACLU‚Äôs privacy and data governance unit. Read the full story.&nbsp;



‚ÄîJames O‚ÄôDonnell&nbsp;



Read more of our stories about the latest in drone tech:



+ Why you‚Äôre about to see a lot more drones over America‚Äôs skies.



+ Meet Serhii ‚ÄúFlash‚Äù Beskrestnov, the radio-obsessed civilian shaping Ukraine‚Äôs drone defense. His work could help to determine the future of Ukraine, and wars far beyond it.+ We examined four big trends that show what‚Äôs next for drone technology.+ The defense tech startup Epirus has developed a cutting-edge, cost-efficient drone zapper that‚Äôs sparking the interest of the US military. Read our story about how it could change the future of war.







The must-reads



I‚Äôve combed the internet to find you today‚Äôs most fun/important/scary/fascinating stories about technology.



1 TikTok US is being valued at $14 billion by Trump‚Äôs dealThat‚Äôs shockingly low for a fast-growing social media company. (FT $)&nbsp;+ The deal is basically just Trump giving TikTok to his friends. (Vox $)+ Here‚Äôs what the sale means for you. (WP $)



2 Microsoft has stopped letting Israel use its technology for surveillanceThe system was used to collect millions of Palestinian civilians&#8217; phone calls every day. (The Guardian)3 There are more robots working in China than the rest of the world combinedIt‚Äôs a trend that‚Äôll further cement its status as the world‚Äôs leading manufacturer. (NYT $)+ China‚Äôs EV giants are betting big on humanoid robots. (MIT Technology Review)4 The inside story of what happened when DOGE came to townIf anything, this is even more grim and chaotic than you might imagine. (Wired $)



5 Instagram‚Äôs teen safety features are flawedResearchers tested 47 of these features, and found that only 8 were fully effective. (Reuters $)+ There‚Äôs growing concern among lawmakers about the risks of kids forming bonds with chatbots. (MIT Technology Review)



6 Brazil‚Äôs judicial system is adopting AI with gustoThe trouble is that rather than reducing the amount of work for judges and lawyers, AI seems to be increasing it. (Rest of World)+ Meet the early-adopter judges using AI. (MIT Technology Review)7 Amazon is refunding $1.5 billion to Prime subscribersThe deal with the FTC lets it avoid a trial over claims it tricked consumers into signing up. (WP $)8 These women are in love with AI&nbsp;Like it or not, these sorts of romances are becoming more common. (Slate $)+ It‚Äôs surprisingly easy to stumble into a relationship with an AI chatbot. (MIT Technology Review)&nbsp;9 Scientists are improving how we measure nothingResearchers are developing a vacuum-measurement tool that could unlock exciting new possibilities for science. (IEEE Spectrum)+ This quantum radar could image buried objects. (MIT Technology Review)10 Why does everything online feel so icky?&nbsp;Most of us will go to extreme lengths to avoid awkwardness IRL. On social media, it‚Äôs another matter entirely‚Ä¶ (Vox $)+ China‚Äôs government has had enough of everyone being negative on its internet. (BBC)







Quote of the day



‚ÄúAI machines‚Äîin quite a literal sense‚Äîappear to be saving the US economy right now. In the absence of tech-related spending, the US would be close to, or in, recession this year.‚Äù



‚ÄîGeorge Saravelos, global head of FX research at Deutsche Bank, warns that the AI boom is unsustainable in a note to clients, Fortune reports.







One more thing



COURTESY OF OPENAI




The two people shaping the future of OpenAI‚Äôs research



‚ÄîWill Douglas HeavenFor the past couple of years, OpenAI has felt like a one-man brand. With his showbiz style and fundraising glitz, CEO Sam Altman overshadows all other big names on the firm‚Äôs roster.



But Altman is not the one building the technology on which its reputation rests. That responsibility falls to OpenAI‚Äôs twin heads of research‚Äîchief research officer Mark Chen and chief scientist Jakub Pachocki. Between them, they share the role of making sure OpenAI stays one step ahead of powerhouse rivals like Google.



I recently sat down with Chen and Pachocki for an exclusive conversation which covered everything from how they manage the inherent tension between research and product, to what they really mean when they talk about AGI, and what happened to OpenAI‚Äôs superalignment team. Read the full story.







We can still have nice things



+ Wherever you are,¬†this website¬†helps you discover the most interesting bars nearby.¬†+ Take a tour of Norway‚Äôs¬†lighthouses.+ Inside London‚Äôs flourishing¬†underground rave scene.+ Meaningful changes rarely occur instantly.¬†Here‚Äôs how they do happen.
‚Ä¢ Shoplifters could soon be chased down by drones
  Flock Safety, whose drones were once reserved for police departments, is now offering them for private-sector security . The company says it‚Äôs in talks with large retailers but doesn‚Äôt yet have any signed contracts . Flock will pitch the drones to hospital campuses, warehouse sites, and oil and gas facilities . The ACLU says Flock's expansion into the private sector is ‚Äúa logical step, but in the wrong direction‚Äù
‚Ä¢ The Download: growing threats to vulnerable languages, and fact-checking Trump‚Äôs medical claims
  This is today&#8217;s edition of¬†The Download,¬†our weekday newsletter that provides a daily dose of what&#8217;s going on in the world of technology.







How AI and Wikipedia have sent vulnerable languages into a doom spiral



Wikipedia is the most ambitious multilingual project after the Bible: There are editions in over 340 languages, and a further 400 even more obscure ones are being developed. But many of these smaller editions are being swamped with AI-translated content. Volunteers working on four African languages, for instance, estimated to MIT Technology Review that between 40% and 60% of articles in their Wikipedia editions were uncorrected machine translations.



This is beginning to cause a wicked problem. AI systems learn new languages by scraping huge quantities of text from the internet. Wikipedia is sometimes the largest source of online linguistic data for languages with few speakers‚Äîso any errors on those pages can poison the wells that AI is expected to draw from. Volunteers are being forced to go to extreme lengths to fix the issue, even deleting certain languages from Wikipedia entirely. Read the full story.&nbsp;



‚ÄîJacob Judah&nbsp;



This story is part of our Big Story series: MIT Technology Review‚Äôs most important, ambitious reporting. These stories take a deep look at the technologies that are coming next and what they will mean for us and the world we live in. Check out the rest of the series here.







Trump is pushing leucovorin as a new treatment for autism. What is it?&nbsp;



On Monday, President Trump claimed that childhood vaccines and acetaminophen, the active ingredient in Tylenol, are to blame for the increasing prevalence of autism. He advised pregnant women against taking the medicine.&nbsp;



The administration also announced that the FDA would work to make a medication called leucovorin available as a treatment for children with autism. The president‚Äôs assertions left many dismayed. ‚ÄúThe data cited do not support the claim that Tylenol causes autism and leucovorin is a cure, and only stoke fear and falsely suggest hope when there is no simple answer,‚Äù said the Coalition for Autism Researchers, a group of more than 250 scientists, in a statement. So what does the evidence say? Read our story to find out.&nbsp;



‚ÄîCassandra Willyard&nbsp;



This is part of our MIT Technology Review Explains series, where our writers untangle the complex, messy world of technology to help you understand what‚Äôs coming next. You can read more from the series here.







Fusion power plants don‚Äôt exist yet, but they‚Äôre making money anyway



This week, Commonwealth Fusion Systems announced it has another customer for its first commercial fusion power plant, in Virginia. Eni, one of the world‚Äôs largest oil and gas companies, signed a billion-dollar deal to buy electricity from the facility.



One small detail? That reactor doesn‚Äôt exist yet. This is a weird moment in fusion. Investors are pouring billions into the field to build power plants, and companies are even signing huge agreements to purchase power from those still-nonexistent plants.&nbsp;



But all this comes before companies have actually completed a working reactor that can produce electricity. It takes money to develop a new technology, but all this funding could lead to some twisted expectations. Read the full story.



‚ÄîCasey Crownhart&nbsp;



This story is from The Spark, our weekly newsletter all about the latest in climate change and clean tech. Sign up to receive it in your inbox every Wednesday.







The AI Hype Index: Cracking the chatbot code



Millions of us use chatbots every day, even though we don‚Äôt really know how they work or how using them affects us. In a bid to address this, the FTC recently launched an inquiry into how chatbots affect children and teenagers. Elsewhere, OpenAI has started to shed more light on what people are actually using ChatGPT for, and why it thinks its LLMs are so prone to making stuff up.



There‚Äôs still plenty we don‚Äôt know‚Äîbut that isn‚Äôt stopping governments from forging ahead with AI projects. In the US, RFK Jr. is pushing his staffers to use ChatGPT, while Albania is using a chatbot for public contract procurement. Check out the latest edition of our AI Hype Index to help you sort AI reality from hyped-up fiction.&nbsp;







The must-reads



I‚Äôve combed the internet to find you today‚Äôs most fun/important/scary/fascinating stories about technology.



1 Huntington‚Äôs disease has been treated successfully for the first timeGene therapy managed to slow progress of the disease in patients by 75%. (The Economist $)&nbsp;+ Here‚Äôs how the gene editing tool CRISPR is changing lives. (MIT Technology Review)2 Google says 90% of tech workers are using AIBut most of them also say they don‚Äôt trust AI models‚Äô outputs. (CNN)+ Why does AI hallucinate? (MIT Technology Review)3 A MAGA TikTok takeover is comingJust as free speech protections in the US start to look worryingly fragile. (The Atlantic $)4 Chinese tech workers are returning from the USThere‚Äôs a whole bunch of complex factors both driving them to leave, and luring them back. (Rest of World)+ But it‚Äôs hard to say what the impact of the new $100,000 fee for H-1B visas will be on India‚Äôs tech sector. (WP $)+ Europe is hoping to nab more tech talent too. (The Verge)



5 If AI can diagnose us, what are doctors for?They need to prepare for the fact chatbot use is becoming more and more widespread among patients. (New Yorker $)+ This medical startup uses LLMs to run appointments and make diagnoses. (MIT Technology Review)6 Drones have been spotted at four more airports in DenmarkIt looks like a coordinated attack, but officials still haven‚Äôt worked out who is behind it. (FT $)7 TSMC has unveiled AI-designed chips that use less energyThe AI software found better solutions than TSMC‚Äôs own human engineers‚Äîand did so much faster. (South China Morning Post)+ These four charts sum up the state of AI and energy. (MIT Technology Review)



8 How to find love on dating apps&nbsp;It‚Äôs not easy, but it is possible. (The Guardian)9 AI models can‚Äôt cope with Persian social etiquetteIt involves a lot of saying ‚Äòno‚Äô when you mean ‚Äòyes‚Äô, which simply doesn‚Äôt wash with computers. (Ars Technica)10 VR headsets are better than ever, but no one seems to careThe tech industry keeps overestimating how willing people are to strap computers to their faces. (Gizmodo)







Quote of the day



‚ÄúWe are living through the most destructive arms race in human history.‚Äù



‚ÄîUkrainian president Volodymyr Zelenskyy tells world leaders gathered at the UN that they need to intervene to stop the escalating development of drone technology and AI, The Guardian reports.







One more thing



STUART BRADFORD




The great AI consciousness conundrum



AI consciousness isn‚Äôt just a tricky intellectual puzzle; it‚Äôs a morally weighty problem. Fail to identify a conscious AI, and you might unintentionally subjugate a being whose interests ought to matter. Mistake an unconscious AI for a conscious one, and you risk compromising human safety and happiness for the sake of an unthinking, unfeeling hunk of silicon and code.



Over the past few decades, a small research community has doggedly attacked the question of what consciousness is and how it works. The effort has yielded real progress. And now, with the rapid advance of AI technology, these insights could offer our only guide to the untested, morally fraught waters of artificial consciousness. Read the full story.



‚ÄîGrace Huckins







We can still have nice things



A place for comfort, fun and distraction to brighten up your day. (Got any ideas? Drop me a line or skeet &#8217;em at me.)



+ It‚Äôs Fat Bear Week! Who gets your vote this year?+ Learn about Lord Woodbine, the forgotten sixth Beatle.&nbsp;+ There are some truly wild and wacky recipes in this Medieval Cookery collection. Venison porridge, anyone?&nbsp;+ Pessimism about technology is as old as technology itself, as this archive shows.
‚Ä¢ Fusion power plants don‚Äôt exist yet, but they‚Äôre making money anyway
  This week, Commonwealth Fusion Systems announced it has another customer for its first commercial fusion power plant, in Virginia. Eni, one of the world‚Äôs largest oil and gas companies, signed a billion-dollar deal to buy electricity from the facility.





One small detail? That reactor doesn‚Äôt exist yet. Neither does the smaller reactor Commonwealth is building first to demonstrate that its tokamak design will work as intended.



This is a weird moment in fusion. Investors are pouring billions into the field to build power plants, and some companies are even signing huge agreements to purchase power from those still-nonexistent plants. All this comes before companies have actually completed a working reactor that can produce electricity. It takes money to develop a new technology, but all this funding could lead to some twisted expectations.&nbsp;



Nearly three years ago, the National Ignition Facility at Lawrence Livermore National Laboratory hit a major milestone for fusion power. With the help of the world‚Äôs most powerful lasers, scientists heated a pellet of fuel to 100 million ¬∞C. Hydrogen atoms in that fuel fused together, releasing more energy than the lasers put in.



It was a game changer for the vibes in fusion. The NIF experiment finally showed that a fusion reactor could yield net energy. Plasma physicists‚Äô models had certainly suggested that it should be true, but it was another thing to see it demonstrated in real life.



But in some ways, the NIF results didn‚Äôt really change much for commercial fusion. That site‚Äôs lasers used a bonkers amount of energy, the setup was wildly complicated, and the whole thing lasted a fraction of a second. To operate a fusion power plant, not only do you have to achieve net energy, but you also need to do that on a somewhat constant basis and‚Äîcrucially‚Äîdo it economically.



So in the wake of the NIF news, all eyes went to companies like Commonwealth, Helion, and Zap Energy. Who would be the first to demonstrate this milestone in a more commercially feasible reactor? Or better yet, who would be the first to get a power plant up and running?



So far, the answer is none of them.





To be fair, many fusion companies have made technical progress. Commonwealth has built and tested its high-temperature superconducting magnets and published research about that work. Zap Energy demonstrated three hours of continuous operation in its test system, a milestone validated by the US Department of Energy. Helion started construction of its power plant in Washington in July. (And that‚Äôs not to mention a thriving, publicly funded fusion industry in China.)&nbsp;&nbsp;



These are all important milestones, and these and other companies have seen many more. But as Ed Morse, a professor of nuclear engineering at Berkeley, summed it up to me: ‚ÄúThey don‚Äôt have a reactor.‚Äù (He was speaking specifically about Commonwealth, but really, the same goes for the others.)



And yet, the money pours in. Commonwealth raised over $800 million in funding earlier this year. And now it‚Äôs got two big customers signed on to buy electricity from this future power plant.



Why buy electricity from a reactor that‚Äôs currently little more than ideas on paper? From the perspective of these particular potential buyers, such agreements can be something of a win-win, says Adam Stein, director of nuclear energy innovation at the Breakthrough Institute.



By putting a vote of confidence behind Commonwealth, Eni could help the fusion startup get the capital it needs to actually build its plant. The company also directly invests in Commonwealth, so it stands to benefit from success. Getting a good rate on the capital needed to build the plant could also mean the electricity is ultimately cheaper for Eni, Stein says.&nbsp;



Ultimately, fusion needs a lot of money. If fossil-fuel companies and tech giants want to provide it, all the better. One concern I have, though, is how outside observers are interpreting these big commitments.&nbsp;



US Energy Secretary Chris Wright has been loud about his support for fusion and his expectations of the technology. Earlier this month, he told the BBC that it will soon power the world.



He‚Äôs certainly not the first to have big dreams for fusion, and it is an exciting technology. But despite the jaw-dropping financial milestones, this industry is still very much in development.&nbsp;



And while Wright praises fusion, the Trump administration is slashing support for other energy technologies, including wind and solar power, and spreading disinformation about their safety, cost, and effectiveness.&nbsp;



To meet the growing electricity demand and cut emissions from the power sector, we‚Äôll need a whole range of technologies. It‚Äôs a risk and a distraction to put all our hopes on an unproven energy tech when there are plenty of options that actually exist.&nbsp;



This article is from The Spark, MIT Technology Review‚Äôs weekly climate newsletter. To receive it in your inbox every Wednesday, sign up here.

üîí Cybersecurity & Privacy
‚Ä¢ Feds Tie ‚ÄòScattered Spider‚Äô Duo to $115M in Ransoms
  U.S. prosecutors last week levied criminal hacking charges against 19-year-old U.K. national Thalha Jubair for allegedly being a core member of Scattered Spider, a prolific cybercrime group blamed for extorting at least $115 million in ransom payments from victims. The charges came as Jubair and an alleged co-conspirator appeared in a London court to face accusations of hacking into and extorting several large U.K. retailers, the London transit system, and healthcare providers in the United States.
At a court hearing last week, U.K. prosecutors laid out a litany of charges against Jubair and 18-year-old Owen Flowers, accusing the teens of involvement in an August 2024 cyberattack that crippled Transport for London, the entity responsible for the public transport network in the Greater London area.
A court artist sketch of Owen Flowers (left) and Thalha Jubair appearing at Westminster Magistrates&#8217; Court last week. Credit: Elizabeth Cook, PA Wire.
On July 10, 2025, KrebsOnSecurity reported that Flowers and Jubair had been arrested in the United Kingdom in connection with recent Scattered Spider ransom attacks against the retailers Marks &amp; Spencer and Harrods, and the British food retailer Co-op Group.
That story cited sources close to the investigation saying Flowers was the Scattered Spider member who anonymously gave interviews to the media in the days after the group&#8217;s September 2023 ransomware attacks disrupted operations at Las Vegas casinos operated by MGM Resorts and Caesars Entertainment.
The story also noted that Jubair&#8217;s alleged handles on cybercrime-focused Telegram channels had far lengthier rap sheets involving some of the more consequential and headline-grabbing data breaches over the past four years. What follows is an account of cybercrime activities that prosecutors have attributed to Jubair&#8217;s alleged hacker handles, as told by those accounts in posts to public Telegram channels that are closely monitored by multiple cyber intelligence firms.
EARLY DAYS (2021-2022)
Jubair is alleged to have been a core member of the LAPSUS$¬†cybercrime group that¬†broke into dozens of technology companies beginning in late 2021, stealing source code and other internal data from tech giants including¬†Microsoft,¬†Nvidia,¬†Okta,¬†Rockstar Games,¬†Samsung,¬†T-Mobile, and¬†Uber.
That is, according to the former leader of the now-defunct LAPSUS$. In April 2022, KrebsOnSecurity published internal chat records taken from a server that LAPSUS$ used, and those chats indicate Jubair was working with the group using the nicknames Amtrak¬†and¬†Asyntax. In the middle of the gang&#8217;s cybercrime spree, Asyntax told the LAPSUS$ leader not to share T-Mobile‚Äôs logo in images sent to the group because he‚Äôd been previously busted for SIM-swapping and his parents would suspect he was back at it again.
The leader of LAPSUS$ responded by gleefully posting Asyntax&#8217;s real name, phone number, and other hacker handles into a public chat room on Telegram:

In March 2022, the leader of the LAPSUS$ data extortion group exposed Thalha Jubair‚Äôs name and hacker handles in a public chat room on Telegram.

That story about the leaked LAPSUS$ chats also connected Amtrak/Asyntax to several previous hacker identities, including ‚ÄúEverlynn,‚Äù who in April 2021 began offering a cybercriminal service that sold fraudulent ‚Äúemergency data requests‚Äù¬†targeting the major social media and email providers.
In these so-called &#8220;fake EDR&#8221; schemes, the hackers compromise email accounts tied to police departments and government agencies, and then send unauthorized demands for subscriber data (e.g. username, IP/email address), while claiming the information being requested can‚Äôt wait for a court order because it relates to an urgent matter of life and death.
The roster of the now-defunct &#8220;Infinity Recursion&#8221; hacking team, which sold fake EDRs between 2021 and 2022. The founder &#8220;Everlynn&#8221; has been tied to Jubair. The member listed as ‚ÄúPeter‚Äù became the leader of LAPSUS$ who would later post Jubair‚Äôs name, phone number and hacker handles into LAPSUS$‚Äôs chat channel.

EARTHTOSTAR
Prosecutors in New Jersey last week alleged Jubair was part of a threat group variously known as Scattered Spider, 0ktapus, and UNC3944, and that he used the nicknames EarthtoStar, Brad, Austin, and Austistic.
Beginning in 2022, EarthtoStar co-ran a bustling Telegram channel called Star Chat, which was home to a prolific SIM-swapping group that relentlessly used voice- and SMS-based phishing attacks to steal credentials from employees at the major wireless providers in the U.S. and U.K.
Jubair allegedly used the handle &#8220;Earth2Star,&#8221; a core member of a prolific SIM-swapping group operating in 2022. This ad produced by the group lists various prices for SIM swaps.
The group would then use that access to sell a SIM-swapping service that could redirect a target&#8217;s phone number to a device the attackers controlled, allowing them to intercept the victim&#8217;s phone calls and text messages (including one-time codes). Members of Star Chat targeted multiple wireless carriers with SIM-swapping attacks, but they focused mainly on phishing T-Mobile employees.
In February 2023, KrebsOnSecurity scrutinized more than seven months of these SIM-swapping solicitations on Star Chat, which almost daily peppered the public channel with &#8220;Tmo up!&#8221; and &#8220;Tmo down!&#8221; notices indicating periods wherein the group claimed to have active access to T-Mobile&#8217;s network.
A redacted receipt from Star Chat&#8217;s SIM-swapping service targeting a T-Mobile customer after the group gained access to internal T-Mobile employee tools.
The data showed that Star Chat &#8212; along with two other SIM-swapping groups operating at the same time &#8212; collectively broke into T-Mobile over a hundred times in the last seven months of 2022. However, Star Chat was by far the most prolific of the three, responsible for at least 70 of those incidents.
The 104 days in the latter half of 2022 in which different known SIM-swapping groups claimed access to T-Mobile employee tools. Star Chat was responsible for a majority of these incidents. Image: krebsonsecurity.com.
A review of EarthtoStar&#8217;s messages on Star Chat as indexed by the threat intelligence firm Flashpoint shows this person also sold &#8220;AT&amp;T email resets&#8221; and AT&amp;T call forwarding services for up to $1,200 per line. EarthtoStar explained the purpose of this service in post on Telegram:
&#8220;Ok people are confused, so you know when u login to chase and it says &#8216;2fa required&#8217; or whatever the fuck, well it gives you two options, SMS or Call. If you press call, and I forward the line to you then who do you think will get said call?&#8221;
New Jersey prosecutors allege Jubair also was involved in a mass SMS phishing campaign during the summer of 2022 that stole single sign-on credentials from employees at hundreds of companies. The text messages asked users to click a link and log in at a phishing page that mimicked their employer‚Äôs Okta authentication page, saying recipients needed to review pending changes to their upcoming work schedules.
The phishing websites used a Telegram instant message bot to forward any submitted credentials in real-time, allowing the attackers to use the phished username, password and one-time code to log in as that employee at the real employer website.
That weeks-long SMS phishing campaign led to intrusions and data thefts at more than 130 organizations, including LastPass, DoorDash, Mailchimp, Plex and Signal.
A visual depiction of the attacks by the SMS phishing group known as 0ktapus, ScatterSwine, and Scattered Spider. Image: Amitai Cohen twitter.com/amitaico.
DA, COMRADE
EarthtoStar&#8217;s group Star Chat specialized in phishing their way into business process outsourcing (BPO) companies that provide customer support for a range of multinational companies, including a number of the world&#8217;s largest telecommunications providers. In May 2022, EarthtoStar posted to the Telegram channel &#8220;Frauwudchat&#8221;:
&#8220;Hi, I am looking for partners in order to exfiltrate data from large telecommunications companies/call centers/alike, I have major experience in this field, [including] a massive call center which houses 200,000+ employees where I have dumped all user credentials and gained access to the [domain controller] + obtained global administrator I also have experience with REST API&#8217;s and programming. I have extensive experience with VPN, Citrix, cisco anyconnect, social engineering + privilege escalation. If you have any Citrix/Cisco VPN or any other useful things please message me and lets work.&#8221;
At around the same time in the Summer of 2022, at least two different accounts tied to Star Chat &#8212; &#8220;RocketAce&#8221; and &#8220;Lopiu&#8221; &#8212; introduced the group&#8217;s services to denizens of the Russian-language cybercrime forum Exploit, including:
-SIM-swapping services targeting Verizon and T-Mobile customers;
-Dynamic phishing pages targeting customers of single sign-on providers like Okta;
-Malware development services;
-The sale of extended validation (EV) code signing certificates.
The user &#8220;Lopiu&#8221; on the Russian cybercrime forum Exploit advertised many of the same unique services offered by EarthtoStar and other Star Chat members. Image source: ke-la.com.
These two accounts on Exploit created multiple sales threads in which they claimed administrative access to U.S. telecommunications providers and asked other Exploit members for help in monetizing that access. In June 2022, RocketAce, which appears to have been just one of EarthtoStar&#8217;s many aliases, posted to Exploit:
Hello. I have access to a telecommunications company&#8217;s citrix and vpn. I would like someone to help me break out of the system and potentially attack the domain controller so all logins can be extracted we can discuss payment and things leave your telegram in the comments or private message me ! Looking for someone with knowledge in citrix/privilege escalation
On Nov. 15, 2022, EarthtoStar posted to their Star Sanctuary Telegram channel that they were hiring malware developers with a minimum of three years of experience and the ability to develop rootkits, backdoors and malware loaders.
&#8220;Optional: Endorsed by advanced APT Groups (e.g. Conti, Ryuk),&#8221; the ad concluded, referencing two of Russia&#8217;s most rapacious and destructive ransomware affiliate operations. &#8220;Part of a nation-state / ex-3l (3 letter-agency).&#8221;
2023-PRESENT DAY
The Telegram and Discord chat channels wherein Flowers and Jubair allegedly planned and executed their extortion attacks are part of a loose-knit network known as the Com, an English-speaking cybercrime community consisting mostly of individuals living in the United States, the United Kingdom, Canada and Australia.
Many of these Com chat servers have hundreds to thousands of members each, and some of the more interesting solicitations on these communities are job offers for in-person assignments and tasks that can be found if one searches for posts titled, ‚ÄúIf you live near,‚Äù or ‚ÄúIRL job‚Äù ‚Äî short for ‚Äúin real life‚Äù job.
These &#8220;violence-as-a-service&#8221; solicitations typically involve ‚Äúbrickings,‚Äù where someone is hired to toss a brick through the window at a specified address. Other IRL jobs for hire include tire-stabbings, molotov cocktail hurlings, drive-by shootings, and even home invasions. The people targeted by these services are typically other criminals within the community, but it&#8217;s not unusual to see Com members asking others for help in harassing or intimidating security researchers and even the very law enforcement officers who are investigating their alleged crimes.
It remains unclear what precipitated this incident or what followed directly after, but on January 13, 2023, a Star Sanctuary account used by EarthtoStar solicited the home invasion of a sitting U.S. federal prosecutor from New York. That post included a photo of the prosecutor taken from the Justice Department&#8217;s website, along with the message:
&#8220;Need irl niggas, in home hostage shit no fucking pussies no skinny glock holding 100 pound niggas either&#8221;
Throughout late 2022 and early 2023, EarthtoStar&#8217;s alias &#8220;Brad&#8221; (a.k.a. &#8220;Brad_banned&#8221;) frequently advertised Star Chat&#8217;s malware development services, including custom malicious software designed to hide the attacker&#8217;s presence on a victim machine:
We can develop KERNEL malware which will achieve persistence for a long time,
bypass firewalls and have reverse shell access.
This shit is literally like STAGE 4 CANCER FOR COMPUTERS!!!
Kernel meaning the highest level of authority on a machine.
This can range to simple shells to Bootkits.
Bypass all major EDR&#8217;s (SentinelOne, CrowdStrike, etc)
Patch EDR&#8217;s scanning functionality so it&#8217;s rendered useless!
Once implanted, extremely difficult to remove (basically impossible to even find)
Development Experience of several years and in multiple APT Groups.
Be one step ahead of the game. Prices start from $5,000+. Message @brad_banned to get a quote
In September 2023 , both MGM Resorts and Caesars Entertainment suffered ransomware attacks at the hands of a Russian ransomware affiliate program known as ALPHV and BlackCat. Caesars reportedly paid a $15 million ransom in that incident.
Within hours of MGM publicly acknowledging the 2023 breach, members of Scattered Spider were claiming credit and telling reporters they&#8217;d broken in by social engineering a third-party IT vendor. At a hearing in London last week, U.K. prosecutors told the court Jubair was found in possession of more than $50 million in ill-gotten cryptocurrency, including funds that were linked to the Las Vegas casino hacks.
The Star Chat channel was finally banned by Telegram on March 9, 2025. But U.S. prosecutors say Jubair and fellow Scattered Spider members continued their hacking, phishing and extortion activities up until September 2025.
In April 2025, the Com was buzzing about the publication of &#8220;The Com Cast,&#8221; a lengthy screed detailing Jubair&#8217;s alleged cybercriminal activities and nicknames over the years. This account included photos and voice recordings allegedly of Jubair, and asserted that in his early days on the Com Jubair used the nicknames Clark and Miku (these are both aliases used by Everlynn in connection with their fake EDR services).
Thalha Jubair (right), without his large-rimmed glasses, in an undated photo posted in The Com Cast.
More recently, the anonymous Com Cast author(s) claimed, Jubair had used the nickname &#8220;Operator,&#8221; which corresponds to a Com member who ran an automated Telegram-based doxing service that pulled consumer records from hacked data broker accounts. That public outing came after Operator allegedly seized control over the Doxbin, a long-running and highly toxic community that is used to &#8220;dox&#8221; or post deeply personal information on people.
&#8220;Operator/Clark/Miku: A key member of the ransomware group Scattered Spider, which consists of a diverse mix of individuals involved in SIM swapping and phishing,&#8221; the Com Cast account stated. &#8220;The group is an amalgamation of several key organizations, including Infinity Recursion (owned by Operator), True Alcorians (owned by earth2star), and Lapsus, which have come together to form a single collective.&#8221;
The New Jersey complaint (PDF) alleges Jubair and other Scattered Spider members committed computer fraud, wire fraud, and money laundering in relation to at least 120 computer network intrusions involving 47 U.S. entities between May 2022 and September 2025. The complaint alleges the group&#8217;s victims paid at least $115 million in ransom payments.
U.S. authorities say they traced some of those payments to Scattered Spider to an Internet server controlled by Jubair. The complaint states that a cryptocurrency wallet discovered on that server was used to purchase several gift cards, one of which was used at a food delivery company to send food to his apartment. Another gift card purchased with cryptocurrency from the same server was allegedly used to fund online gaming accounts under Jubair&#8217;s name. U.S. prosecutors said that when they seized that server they also seized $36 million in cryptocurrency.
The complaint also charges Jubair with involvement in a hacking incident in January 2025 against the U.S. courts system that targeted a U.S. magistrate judge overseeing a related Scattered Spider investigation. That other investigation appears to have been the prosecution of Noah Michael Urban, a 20-year-old Florida man charged in November 2024 by prosecutors in Los Angeles as one of five alleged Scattered Spider members.
Urban pleaded guilty in April 2025 to wire fraud and conspiracy charges, and in August he was sentenced to 10 years in federal prison. Speaking with KrebsOnSecurity from jail after his sentencing, Urban asserted that the judge case gave him more time than prosecutors requested because he was mad that Scattered Spider hacked his email account.
Noah &#8220;Kingbob&#8221; Urban, posting to Twitter/X around the time of his sentencing on Aug. 20.
A¬†court transcript (PDF) from a status hearing in February 2025 shows Urban was telling the truth about the hacking incident that happened while he was in federal custody. The judge told attorneys for both sides that a co-defendant in the California case was trying to find out about Mr. Urban‚Äôs activity in the Florida case, and that the hacker accessed the account by impersonating a judge over the phone and requesting a password reset.
Allison Nixon is chief research officer at the New York based security firm Unit 221B, and easily one of the world&#8217;s leading experts on Com-based cybercrime activity. Nixon said the core problem with legally prosecuting well-known cybercriminals from the Com has traditionally been that the top offenders tend to be under the age of 18, and thus difficult to charge under federal hacking statutes.
In the United States, prosecutors typically wait until an underage cybercrime suspect becomes an adult to charge them. But until that day comes, she said, Com actors often feel emboldened to continue committing &#8212; and very often bragging about &#8212; serious cybercrime offenses.
&#8220;Here we have a special category of Com offenders that effectively enjoy legal immunity,&#8221; Nixon told KrebsOnSecurity. &#8220;Most get recruited to Com groups when they are older, but of those that join very young, such as 12 or 13, they seem to be the most dangerous because at that age they have no grounding in reality and so much longevity before they exit their legal immunity.‚Äù
Nixon said U.K. authorities face the same challenge when they briefly detain and search the homes of underage Com suspects: Namely, the teen suspects simply go right back to their respective cliques in the Com and start robbing and hurting people again the minute they&#8217;re released.
Indeed, the U.K. court heard from prosecutors last week that both Scattered Spider suspects were detained and/or searched by local law enforcement on multiple occasions, only to return to the Com less than 24 hours after being released each time.
&#8220;What we see is these young Com members become vectors for perpetrators to commit enormously harmful acts and even child abuse,&#8221; Nixon said. &#8220;The members of this special category of people who enjoy legal immunity are meeting up with foreign nationals and conducting these sometimes heinous acts at their behest.&#8221;
Nixon said many of these individuals have few friends in real life because they spend virtually all of their waking hours on Com channels, and so their entire sense of identity, community and self-worth gets wrapped up in their involvement with these online gangs. She said if¬†the law was such that prosecutors could treat these people commensurate with the amount of harm they cause society, that would probably clear up a lot of this problem.
&#8220;If law enforcement was allowed to keep them in jail, they would quit reoffending,&#8221; she said.
The Times of London reports that Flowers is facing three charges under the Computer Misuse Act: two of conspiracy to commit an unauthorized act in relation to a computer causing/creating risk of serious damage to human welfare/national security and one of attempting to commit the same act. Maximum sentences for these offenses can range from 14 years to life in prison, depending on the impact of the crime.
Jubair is reportedly facing two charges in the U.K.: One of conspiracy to commit an unauthorized act in relation to a computer causing/creating risk of serious damage to human welfare/national security and one of failing to comply with a section 49 notice to disclose the key to protected information.
In the United States, Jubair is charged with computer fraud conspiracy, two counts of computer fraud, wire fraud conspiracy, two counts of wire fraud, and money laundering conspiracy. If extradited to the U.S., tried and convicted on all charges, he faces a maximum penalty of 95 years in prison.
In July 2025, the United Kingdom barred victims of hacking from paying ransoms to cybercriminal groups unless approved by officials. U.K. organizations that are considered part of critical infrastructure reportedly will face a complete ban, as will the entire public sector. U.K. victims of a hack are now required to notify officials to better inform policymakers on the scale of Britain&#8217;s ransomware problem.
For further reading (bless you), check out Bloomberg&#8217;s poignant story last week based on a year&#8217;s worth of jailhouse interviews with convicted Scattered Spider member Noah Urban.

üéì University AI
No updates.

üè¢ Corporate AI
‚Ä¢ Building health care agents using Amazon Bedrock AgentCore
  This blog was co-authored with Kuldeep Singh, Head of AI Platform at Innovaccer. 
The integration of agentic AI is ushering in a transformative era in health care, marking a significant departure from traditional AI systems. Agentic AI demonstrates autonomous decision-making capabilities and adaptive learning in complex medical environments, enabling it to monitor patient progress, coordinate care teams, and adjust treatment strategies in real time. These intelligent systems are becoming deeply embedded in healthcare operations, from enhancing diagnostic precision through advanced pattern recognition to optimizing clinical workflows and accelerating drug discovery processes. Agentic AI combines proactive problem-solving abilities with real-time adaptability so that healthcare professionals can focus on high-value, patient-centered activities while the AI handles routine tasks and complex data analysis. 
Innovaccer, a pioneering healthcare AI company, recently launched Innovaccer Gravity, built using Amazon Bedrock AgentCore, a new healthcare intelligence platform set to revolutionize data integration and AI-driven healthcare transformation. Building on their impressive track record‚Äîwhere their existing solutions serve more than 1,600 US care locations, manage more than 80 million unified health records, and have generated $1.5B in cost savings‚Äîthis exemplifies how AWS customers are leading the agentic AI evolution by creating intelligent solutions that transform healthcare delivery while delivering significant ROI. 
Health care demands precision and accountability. AI agents operating within this domain must handle sensitive patient data securely, adhere to rigorous compliance regulations (like HIPAA), and maintain consistent interoperability across diverse clinical workflows. Standard, generalized protocols fall short when dealing with complex healthcare systems and patient data protection requirements. Healthcare organizations need a robust service to convert their existing APIs into Model Context Protocol (MCP) compatible tools that can scale effectively while providing built-in authentication, authorization, encryption, and comprehensive audit trails. Amazon Bedrock AgentCore Gateway offers health care providers and digital health companies a straightforward and secure way to build, deploy, discover, and connect to tools at scale that they can use to create AI-powered healthcare solutions while maintaining the highest standards of security and compliance. 
Problem 
Healthcare organizations face significant data silo challenges because of diverse electronic health record (EHR) formats across different systems, often maintaining multiple systems to serve specialized departmental needs and legacy systems. FHIR (Fast Healthcare Interoperability Resources) solves these interoperability challenges by standardizing healthcare data into exchangeable resources (like patient records and lab results), enabling seamless communication between different systems while maintaining security and improving care coordination. However, implementing FHIR presents its own challenges, including technical complexity in integrating with legacy systems and the need for specialized expertise in healthcare informatics and API development. 
The implementation of AI agents introduces new layers of complexity, requiring careful design and maintenance of interfaces with existing systems. AI agents need secure access to the FHIR data and other healthcare tools with authentication (both inbound and outbound) and end-to-end encryption. MCP is a standardized communication framework that enables AI systems to seamlessly interact with external tools, data sources, and services through a unified interface. However, the development and scaling of MCP servers require substantial resources and expertise. Hosting these services demands ongoing development time and attention to maintain optimal performance and reliability. As healthcare organizations navigate this complex terrain, addressing these challenges becomes critical for achieving true interoperability and harnessing the full potential of modern healthcare technology. 
Deploy, enhance, and monitor AI agents at scale using Amazon Bedrock AgentCore 
By using Amazon Bedrock AgentCore, you can deploy and operate highly capable AI agents securely at scale. It offers infrastructure purpose-built for dynamic agent workloads, powerful tools to enhance agents, and essential controls for real-world deployment. Bedrock AgentCore offers a set of composable services with the services most relevant to the solution in this post mentioned in the following list. For more information, see the Bedrock AgentCore documentation. 
 
 AgentCore Runtime provides a secure, serverless runtime purpose-built for deploying and scaling dynamic AI agents and tools using any open source framework, protocol, and model. Runtime was built to work for agentic workloads with industry-leading extended runtime support, fast cold starts, true session isolation, built-in identity, and support for multi-modal payloads. 
 AgentCore Gateway provides a secure way for agents to discover and use tools along with straightforward transformation of APIs, AWS Lambda functions, and existing services into agent-compatible tools. Gateway speeds up custom code development, infrastructure provisioning, and security implementation so developers can focus on building innovative agent applications. 
 AgentCore Identity provides a secure, scalable agent identity and access management capability accelerating AI agent development. It is compatible with existing identity providers, avoiding the need to migrate uses or rebuild authentication flows. 
 AgentCore Observability helps developers trace, debug, and monitor agent performance in production through unified operational dashboards. With support for OpenTelemetry compatible telemetry and detailed visualizations of each step of the agent workflow. 
 
In this solution, we demonstrate how the user (a parent) can interact with a Strands or LangGraph agent in conversational style and get information about the immunization history and schedule of their child, inquire about the available slots, and book appointments. With some changes, AI agents can be made event-driven so that they can automatically send reminders, book appointments, and so on. This reduces the administrative burden on healthcare organizations and the parents who no longer need to keep track of the paperwork or make multiple calls to book appointments. 
 
As shown in the preceding diagram, the workflow for the healthcare appointment book built using Amazon Bedrock AgentCore is the following: 
 
 User interacts with Strands or LangGraph agent: The solution contains both Strands and LangGraph agents. You can also use other frameworks such as AutoGen and CrewAI. 
 Reasoning LLM from Amazon Bedrock: Claude 3.5 Sonnet large language model (LLM) is used from Amazon Bedrock. The model demonstrates advanced reasoning by grasping nuances and complex instructions, along with strong tool-calling capabilities that allow it to effectively integrate with external applications and services to automate various tasks such as web browsing, calculations, or data interactions. 
 Tools exposed using AgentCore Gateway: AgentCore Gateway provides secure access to the necessary tools required for the Strands or LangGraph agent using standard MCP clients. In this solution, REST APIs are hosted on Amazon API Gateway and exposed as MCP tools using AgentCore Gateway. 
 Ingress authentication for AgentCore Gateway: AgentCore Gateway is protected with oAuth 2.0 using Amazon Cognito as the identity provider. You can use other oAuth 2.0 compatible identity providers such as Auth0, and Keycloak as needed to fit your use case. 
 OpenAPI specs converted into tools with AgentCore Gateway: Amazon API Gateway is used as the backend to expose the APIs. By importing the OpenAPI specs, AgentCore Gateway provides an MCP compatible server without additional configuration for tool metadata. The following are the tools used in the solution. 
   
   get_patient_emr(): Gets the parent‚Äôs and child‚Äôs demographics information. 
   search_immunization_emr() ‚Äì Gets the immunization history and schedule for the child. 
   get_available_slots() ‚Äì Gets the pediatrician‚Äôs schedule around parent‚Äôs preferred date. 
   book_appointment() ‚Äì Books an appointment and returns the confirmation number. 
    
 AWS Healthlake as the FHIR server: HealthLake is used to manage patient data related to demographics, immunization history, schedule and appointments, and so on. HealthLake is a HIPAA-eligible service offering healthcare companies a complete view of individual and patient population health data using FHIR API-based transactions to securely store and transform their data into a queryable format at petabyte scale, and further analyze this data using machine learning (ML) models. 
 Egress authentication from AgentCore Gateway to tools: OAuth 2.0 with Amazon Cognito as the identity provider is used to do the authentication between AgentCore Gateway and the tools used in the solution. 
 
Solution setup 
 
  
   
   Important: The following code example is meant for learning and demonstration purposes only. For production implementations, it is recommended to add required error handling, input validation, logging, and security controls. 
   
  
 
The code and instructions to set up and clean up this example solution are available on GitHub. When set up, the solution looks like the following and is targeted towards parents to use the for immunization related appointments. 
 
Customizing the solution 
The solution can be customized to extend the same or a different use case through the following mechanisms: 
 
 OpenAPI specification: The solution uses a sample OpenAPI specification (named fhir-openapi-spec.yaml) with APIs hosted on API Gateway. The OpenAPI specification can be customized to add more tools or use entirely different tools by editing the YAML file. You must recreate the AgentCore gateway after making changes to the OpenAPI spec. 
 Agent instructions and LLM: The strands_agent.py or langgraph_agent.py can be modified to make changes to the goal or instructions for the Agent or to work with a different LLM. 
 
Future enhancements 
We‚Äôre already looking forward and planning future enhancements for this solution. 
 
 AgentCore Runtime: Host strands or a LangGraph agent on AgentCore Runtime. 
 AgentCore Memory: Use AgentCore Memory to preserve session information in short-term (in session) as well as long-term (across sessions) to provide a more personalized experience to the agent users. 
 
Innovaccer‚Äôs use case for Bedrock AgentCore 
Innovaccer‚Äôs gravity platform includes more than 400 connectors to unify data from EHRs from sources such as Epic, Oracle Cerner, and MEDITECH, more than 20 pre-trained models, 15 pre-built AI agents, 100 FHIR resources, and 60 out-of-the-box solutions with role based access control, comprehensive audit trail, end-to-end encryption, and secure personal health information (PHI) handling. They also provide a low-code or no-code interface to build additional AI agents with the tools exposed using Healthcare Model Context Protocol (HMCP) servers. 
Innovaccer uses Bedrock AgentCore for the following purposes: 
 
 AgentCore Gateway to turn their OpenAPI specifications into HMCP compatible tools without the heavy lifting required to build, secure, or scale MCP servers. 
 AgentCore Identity to handle the inbound and outbound authentication integrating with Innovaccer- or customer-provided OAuth servers. 
 AgentCore Runtime to deploy and scale the AI agents with multi-agent collaboration, along with logging, traceability and ability to plug in custom guardrails. 
 
Bedrock AgentCore supports enterprise-grade security with encryption in transit and at rest, complete session isolation, audit trails using AWS CloudTrail, and comprehensive controls to help Innovaccer agents operate reliably and securely at scale. 
Pricing for Bedrock AgentCore Gateway: 
AgentCore Gateway offers a consumption-based pricing model with billing based on API invocations (such as ListTools, InvokeTool and Search API), and indexing of tools. For more information, see the pricing page. 
Conclusion 
The integration of Amazon Bedrock AgentCore with healthcare systems represents a significant leap forward in the application of AI to improve patient care and streamline healthcare operations. By using the suite of services provided by Bedrock AgentCore, healthcare organizations can deploy sophisticated AI agents that securely interact with existing systems, adhere to strict compliance standards, and scale efficiently. 
The solution architecture presented in this post demonstrates the practical application of these technologies, showcasing how AI agents can simplify complex processes such as immunization scheduling and appointment booking. This can reduce administrative burdens on healthcare providers and enhance the patient experience by providing straightforward access to critical health information and services. 
As we look to the future, the potential for AI agents in the healthcare industry is vast. From improving diagnostic accuracy to personalizing treatment plans and streamlining clinical workflows, the possibilities are endless. Tools like Amazon Bedrock AgentCore can help healthcare organizations confidently navigate the complexities of implementing AI while maintaining the highest standards of security, compliance, and patient care. 
The healthcare industry stands at the cusp of a transformative era, where AI agents will play an increasingly central role in delivering efficient, personalized, and high-quality care. By embracing these technologies and continuing to innovate, we can create a healthcare network that is more responsive, intelligent, and patient-centric than ever before. 
 
About the Authors 
Kamal Manchanda is a Senior Solutions Architect at AWS with 17 years of experience in cloud, data, and AI technologies. He works closely with C-level executives and technical teams of AWS customers to drive cloud adoption and digital transformation initiatives. Prior to AWS, he led global teams delivering cloud-centric systems, data-driven applications, and AI/ML solutions across consulting and product organizations. Kamal specializes in translating complex business challenges into scalable, secure solutions that deliver measurable business value. 
Kuldeep Singh is AVP and Head of AI Platform at Innovaccer. He leads the work on AI agentic workflow layers for Gravity by Innovaccer, a healthcare intelligence platform designed to unify data, agents, and compliant workflows so health systems can deploy AI at scale. With deep experience in data engineering, AI, and product leadership, Kuldeep focuses on making healthcare more efficient, safe, and patient-centered. He plays a key role in building tools that allow care teams to automate complex, multi-step tasks (like integrating payer or EHR data, orchestrating clinical agents) without heavy engineering. He‚Äôs passionate about reducing clinician burnout, improving patient outcomes, and turning pilot projects into enterprise-wide AI solutions.
‚Ä¢ Build multi-agent site reliability engineering assistants with Amazon Bedrock AgentCore
  Site reliability engineers (SREs) face an increasingly complex challenge in modern distributed systems. During production incidents, they must rapidly correlate data from multiple sources‚Äîlogs, metrics, Kubernetes events, and operational runbooks‚Äîto identify root causes and implement solutions. Traditional monitoring tools provide raw data but lack the intelligence to synthesize information across these diverse systems, often leaving SREs to manually piece together the story behind system failures. 
With a generative AI solution, SREs can ask their infrastructure questions in natural language. For example, they can ask ‚ÄúWhy are the payment-service pods crash looping?‚Äù or ‚ÄúWhat‚Äôs causing the API latency spike?‚Äù and receive comprehensive, actionable insights that combine infrastructure status, log analysis, performance metrics, and step-by-step remediation procedures. This capability transforms incident response from a manual, time-intensive process into a time-efficient, collaborative investigation. 
In this post, we demonstrate how to build a multi-agent SRE assistant using Amazon Bedrock AgentCore, LangGraph, and the Model Context Protocol (MCP). This system deploys specialized AI agents that collaborate to provide the deep, contextual intelligence that modern SRE teams need for effective incident response and infrastructure management. We walk you through the complete implementation, from setting up the demo environment to deploying on Amazon Bedrock AgentCore Runtime for production use. 
Solution overview 
This solution uses a comprehensive multi-agent architecture that addresses the challenges of modern SRE operations through intelligent automation. The solution consists of four specialized AI agents working together under a supervisor agent to provide comprehensive infrastructure analysis and incident response assistance. 
The examples in this post use synthetically generated data from our demo environment. The backend servers simulate realistic Kubernetes clusters, application logs, performance metrics, and operational runbooks. In production deployments, these stub servers would be replaced with connections to your actual infrastructure systems, monitoring services, and documentation repositories. 
The architecture demonstrates several key capabilities: 
 
 Natural language infrastructure queries ‚Äì You can ask complex questions about your infrastructure in plain English and receive detailed analysis combining data from multiple sources 
 Multi-agent collaboration ‚Äì Specialized agents for Kubernetes, logs, metrics, and operational procedures work together to provide comprehensive insights 
 Real-time data synthesis ‚Äì Agents access live infrastructure data through standardized APIs and present correlated findings 
 Automated runbook execution ‚Äì Agents retrieve and display step-by-step operational procedures for common incident scenarios 
 Source attribution ‚Äì Every finding includes explicit source attribution for verification and audit purposes 
 
The following diagram illustrates the solution architecture. 
 
The architecture demonstrates how the SRE support agent integrates seamlessly with Amazon Bedrock AgentCore components: 
 
 Customer interface ‚Äì Receives alerts about degraded API response times and returns comprehensive agent responses 
 Amazon Bedrock AgentCore Runtime ‚Äì Manages the execution environment for the multi-agent SRE solution 
 SRE support agent ‚Äì Multi-agent collaboration system that processes incidents and orchestrates responses 
 Amazon Bedrock AgentCore Gateway ‚Äì Routes requests to specialized tools through OpenAPI interfaces: 
   
   Kubernetes API for getting cluster events 
   Logs API for analyzing log patterns 
   Metrics API for analyzing performance trends 
   Runbooks API for searching operational procedures 
    
 Amazon Bedrock AgentCore Memory ‚Äì Stores and retrieves session context and previous interactions for continuity 
 Amazon Bedrock AgentCore Identity ‚Äì Handles authentication for tool access using Amazon Cognito integration 
 Amazon Bedrock AgentCore Observability ‚Äì Collects and visualizes agent traces for monitoring and debugging 
 Amazon Bedrock LLMs ‚Äì Powers the agent intelligence through Anthropic‚Äôs Claude large language models (LLMs) 
 
The multi-agent solution uses a supervisor-agent pattern where a central orchestrator coordinates five specialized agents: 
 
 Supervisor agent ‚Äì Analyzes incoming queries and creates investigation plans, routing work to appropriate specialists and aggregating results into comprehensive reports 
 Kubernetes infrastructure agent ‚Äì Handles container orchestration and cluster operations, investigating pod failures, deployment issues, resource constraints, and cluster events 
 Application logs agent ‚Äì Processes log data to find relevant information, identifies patterns and anomalies, and correlates events across multiple services 
 Performance metrics agent ‚Äì Monitors system metrics and identifies performance issues, providing real-time analysis and historical trending 
 Operational runbooks agent ‚Äì Provides access to documented procedures, troubleshooting guides, and escalation procedures based on the current situation 
 
Using Amazon Bedrock AgentCore primitives 
The solution showcases the power of Amazon Bedrock AgentCore by using multiple core primitives. The solution supports two providers for Anthropic‚Äôs LLMs. Amazon Bedrock supports Anthropic‚Äôs Claude 3.7 Sonnet for AWS integrated deployments, and Anthropic API supports Anthropic‚Äôs Claude 4 Sonnet for direct API access. 
The Amazon Bedrock AgentCore Gateway component converts the SRE agent‚Äôs backend APIs (Kubernetes, application logs, performance metrics, and operational runbooks) into Model Context Protocol (MCP) tools. This enables agents built with an open-source framework supporting MCP (such as LangGraph in this post) to seamlessly access infrastructure APIs. 
Security for the entire solution is provided by Amazon Bedrock AgentCore Identity. It supports ingress authentication for secure access control for agents connecting to the gateway, and egress authentication to manage authentication with backend servers, providing secure API access without hardcoding credentials. 
The serverless execution environment for deploying the SRE agent in production is provided by Amazon Bedrock AgentCore Runtime. It automatically scales from zero to handle concurrent incident investigations while maintaining complete session isolation. Amazon Bedrock AgentCore Runtime supports both OAuth and AWS Identity and Access Management (IAM) for agent authentication. Applications that invoke agents must have appropriate IAM permissions and trust policies. For more information, see Identity and access management for Amazon Bedrock AgentCore. 
Amazon Bedrock AgentCore Memory transforms the SRE agent from a stateless system into an intelligent learning assistant that personalizes investigations based on user preferences and historical context. The memory component provides three distinct strategies: 
 
 User preferences strategy (/sre/users/{user_id}/preferences) ‚Äì Stores individual user preferences for investigation style, communication channels, escalation procedures, and report formatting. For example, Alice (a technical SRE) receives detailed systematic analysis with troubleshooting steps, whereas Carol (an executive) receives business-focused summaries with impact analysis. 
 Infrastructure knowledge strategy (/sre/infrastructure/{user_id}/{session_id}) ‚Äì Accumulates domain expertise across investigations, enabling agents to learn from past discoveries. When the Kubernetes agent identifies a memory leak pattern, this knowledge becomes available for future investigations, enabling faster root cause identification. 
 Investigation memory strategy (/sre/investigations/{user_id}/{session_id}) ‚Äì Maintains historical context of past incidents and their resolutions. This enables the solution to suggest proven remediation approaches and avoid anti-patterns that previously failed. 
 
The memory component demonstrates its value through personalized investigations. When both Alice and Carol investigate ‚ÄúAPI response times have degraded 3x in the last hour,‚Äù they receive identical technical findings but completely different presentations. 
Alice receives a technical analysis: 
 
 memory_client.retrieve_user_preferences(user_id="Alice")
# Returns: {"investigation_style": "detailed_systematic_analysis", "reports": "technical_exposition_with_troubleshooting_steps"} 
 
Carol receives an executive summary: 
 
 memory_client.retrieve_user_preferences(user_id="Carol") 
# Returns: {"investigation_style": "business_impact_focused","reports": "executive_summary_without_technical_details"} 
 
Adding observability to the SRE agent 
Adding observability to an SRE agent deployed on Amazon Bedrock AgentCore Runtime is straightforward using the Amazon Bedrock AgentCore Observability primitive. This enables comprehensive monitoring through Amazon CloudWatch with metrics, traces, and logs. Setting up observability requires three steps: 
 
 Add the OpenTelemetry packages to your pyproject.toml: 
   
   dependencies = [
    # ... other dependencies ...
    "opentelemetry-instrumentation-langchain",
    "aws-opentelemetry-distro~=0.10.1",
	] 
    
 Configure observability for your agents to enable metrics in CloudWatch. 
 Start your container using the opentelemetry-instrument utility to automatically instrument your application. 
 
The following command is added to the Dockerfile for the SRE agent: 
 
 # Run application with OpenTelemetry instrumentation 
CMD ["uv", "run", "opentelemetry-instrument", "uvicorn", "sre_agent.agent_runtime:app", "--host", "0.0.0.0", "--port", "8080"] 
 
As shown in the following screenshot, with observability enabled, you gain visibility into the following: 
 
 LLM invocation metrics ‚Äì Token usage, latency, and model performance across agents 
 Tool execution traces ‚Äì Duration and success rates for each MCP tool call 
 Memory operations ‚Äì Retrieval patterns and storage efficiency 
 End-to-end request tracing ‚Äì Complete request flow from user query to final response 
 
 
The observability primitive automatically captures these metrics without additional code changes, providing production-grade monitoring capabilities out of the box. 
Development to production flow 
The SRE agent follows a four-step structured deployment process from local development to production, with detailed procedures documented in Development to Production Flow in the accompanying GitHub repo: 
 
The deployment process maintains consistency across environments: the core agent code (sre_agent/) remains unchanged, and the deployment/ folder contains deployment-specific utilities. The same agent works locally and in production through environment configuration, with Amazon Bedrock AgentCore Gateway providing MCP tools access across different stages of development and deployment. 
Implementation walkthrough 
In the following section, we focus on how Amazon Bedrock AgentCore Gateway, Memory, and Runtime work together to build this multi-agent collaboration solution and deploy it end-to-end with MCP support and persistent intelligence. 
We start by setting up the repository and establishing the local runtime environment with API keys, LLM providers, and demo infrastructure. We then bring core AgentCore components online by creating the gateway for standardized API access, configuring authentication, and establishing tool connectivity. We add intelligence through AgentCore Memory, creating strategies for user preferences and investigation history while loading personas for personalized incident response. Finally, we configure individual agents with specialized tools, integrate memory capabilities, orchestrate collaborative workflows, and deploy to AgentCore Runtime with full observability. 
Detailed instructions for each step are provided in the repository: 
 
 Use Case Setup Guide ‚Äì Backend deployment and development setup 
 Deployment Guide ‚Äì Production containerization and Amazon Bedrock AgentCore Runtime deployment 
 
Prerequisites 
You can find the port forwarding requirements and other setup instructions in the README file‚Äôs Prerequisites section. 
Convert APIs to MCP tools with Amazon Bedrock AgentCore Gateway 
Amazon Bedrock AgentCore Gateway demonstrates the power of protocol standardization by converting existing backend APIs into MCP tools that agent frameworks can consume. This transformation happens seamlessly, requiring only OpenAPI specifications. 
Upload OpenAPI specifications 
The gateway process begins by uploading your existing API specifications to Amazon Simple Storage Service (Amazon S3). The create_gateway.sh script automatically handles uploading the four API specifications (Kubernetes, Logs, Metrics, and Runbooks) to your configured S3 bucket with proper metadata and content types. These specifications will be used to create API endpoint targets in the gateway. 
Create an identity provider and gateway 
Authentication is handled seamlessly through Amazon Bedrock AgentCore Identity. The main.py script creates both the credential provider and gateway: 
 
 # Create AgentCore Gateway with JWT authorization
def create_gateway(
    client: Any,
    gateway_name: str,
    role_arn: str,
    discovery_url: str,
    allowed_clients: list = None,
    description: str = "AgentCore Gateway created via SDK",
    search_type: str = "SEMANTIC",
    protocol_version: str = "2025-03-26",
) -&gt; Dict[str, Any]:
    
    # Build auth config for Cognito
    auth_config = {"customJWTAuthorizer": {"discoveryUrl": discovery_url}}
    if allowed_clients:
        auth_config["customJWTAuthorizer"]["allowedClients"] = allowed_clients
    
    protocol_configuration = {
        "mcp": {"searchType": search_type, "supportedVersions": [protocol_version]}
    }

    response = client.create_gateway(
        name=gateway_name,
        roleArn=role_arn,
        protocolType="MCP",
        authorizerType="CUSTOM_JWT",
        authorizerConfiguration=auth_config,
        protocolConfiguration=protocol_configuration,
        description=description,
        exceptionLevel='DEBUG'
    )
    return response 
 
Deploy API endpoint targets with credential providers 
Each API becomes an MCP target through the gateway. The solution automatically handles credential management: 
 
 def create_api_endpoint_target(
    client: Any,
    gateway_id: str,
    s3_uri: str,
    provider_arn: str,
    target_name_prefix: str = "open",
    description: str = "API Endpoint Target for OpenAPI schema",
) -&gt; Dict[str, Any]:
    
    api_target_config = {"mcp": {"openApiSchema": {"s3": {"uri": s3_uri}}}}

    # API key credential provider configuration
    credential_config = {
        "credentialProviderType": "API_KEY",
        "credentialProvider": {
            "apiKeyCredentialProvider": {
                "providerArn": provider_arn,
                "credentialLocation": "HEADER",
                "credentialParameterName": "X-API-KEY",
            }
        },
    }
    
    response = client.create_gateway_target(
        gatewayIdentifier=gateway_id,
        name=target_name_prefix,
        description=description,
        targetConfiguration=api_target_config,
        credentialProviderConfigurations=[credential_config],
    )
    return response 
 
Validate MCP tools are ready for agent framework 
Post-deployment, Amazon Bedrock AgentCore Gateway provides a standardized /mcp endpoint secured with JWT tokens. Testing the deployment with mcp_cmds.sh reveals the power of this transformation: 
 
 Tool summary:
================
Total tools found: 21

Tool names:
‚Ä¢ x_amz_bedrock_agentcore_search
‚Ä¢ k8s-api___get_cluster_events
‚Ä¢ k8s-api___get_deployment_status
‚Ä¢ k8s-api___get_node_status
‚Ä¢ k8s-api___get_pod_status
‚Ä¢ k8s-api___get_resource_usage
‚Ä¢ logs-api___analyze_log_patterns
‚Ä¢ logs-api___count_log_events
‚Ä¢ logs-api___get_error_logs
‚Ä¢ logs-api___get_recent_logs
‚Ä¢ logs-api___search_logs
‚Ä¢ metrics-api___analyze_trends
‚Ä¢ metrics-api___get_availability_metrics
‚Ä¢ metrics-api___get_error_rates
‚Ä¢ metrics-api___get_performance_metrics
‚Ä¢ metrics-api___get_resource_metrics
‚Ä¢ runbooks-api___get_common_resolutions
‚Ä¢ runbooks-api___get_escalation_procedures
‚Ä¢ runbooks-api___get_incident_playbook
‚Ä¢ runbooks-api___get_troubleshooting_guide
‚Ä¢ runbooks-api___search_runbooks 
 
Universal agent framework compatibility 
This MCP-standardized gateway can now be configured as a Streamable-HTTP server for MCP clients, including AWS Strands, Amazon‚Äôs agent development framework, LangGraph, the framework used in our SRE agent implementation, and CrewAI, a multi-agent collaboration framework. 
The advantage of this approach is that existing APIs require no modification‚Äîonly OpenAPI specifications. Amazon Bedrock AgentCore Gateway handles the following: 
 
 Protocol translation ‚Äì Between REST APIs to MCP 
 Authentication ‚Äì JWT token validation and credential injection 
 Security ‚Äì TLS termination and access control 
 Standardization ‚Äì Consistent tool naming and parameter handling 
 
This means you can take existing infrastructure APIs (Kubernetes, monitoring, logging, documentation) and instantly make them available to AI agent frameworks that support MCP‚Äîthrough a single, secure, standardized interface. 
Implement persistent intelligence with Amazon Bedrock AgentCore Memory 
Whereas Amazon Bedrock AgentCore Gateway provides seamless API access, Amazon Bedrock AgentCore Memory transforms the SRE agent from a stateless system into an intelligent, learning assistant. The memory implementation demonstrates how a few lines of code can enable sophisticated personalization and cross-session knowledge retention. 
Initialize memory strategies 
The SRE agent memory component is built on Amazon Bedrock AgentCore Memory‚Äôs event-based model with automatic namespace routing. During initialization, the solution creates three memory strategies with specific namespace patterns: 
 
 from sre_agent.memory.client import SREMemoryClient
from sre_agent.memory.strategies import create_memory_strategies

# Initialize memory client
memory_client = SREMemoryClient(
    memory_name="sre_agent_memory",
    region="us-east-1"
)

# Create three specialized memory strategies
strategies = create_memory_strategies()
for strategy in strategies:
    memory_client.create_strategy(strategy) 
 
The three strategies each serve distinct purposes: 
 
 User preferences (/sre/users/{user_id}/preferences) ‚Äì Individual investigation styles and communication preferences 
 Infrastructure Knowledge: /sre/infrastructure/{user_id}/{session_id} ‚Äì Domain expertise accumulated across investigations 
 Investigation Summaries: /sre/investigations/{user_id}/{session_id} ‚Äì Historical incident patterns and resolutions 
 
Load user personas and preferences 
The solution comes preconfigured with user personas that demonstrate personalized investigations. The manage_memories.py script loads these personas: 
 
 # Load Alice - Technical SRE Engineer
alice_preferences = {
    "investigation_style": "detailed_systematic_analysis",
    "communication": ["#alice-alerts", "#sre-team"],
    "escalation": {"contact": "alice.manager@company.com", "threshold": "15min"},
    "reports": "technical_exposition_with_troubleshooting_steps",
    "timezone": "UTC"
}

# Load Carol - Executive/Director
carol_preferences = {
    "investigation_style": "business_impact_focused",
    "communication": ["#carol-executive", "#strategic-alerts"],
    "escalation": {"contact": "carol.director@company.com", "threshold": "5min"},
    "reports": "executive_summary_without_technical_details",
    "timezone": "EST"
}

# Store preferences using memory client
memory_client.store_user_preference("Alice", alice_preferences)
memory_client.store_user_preference("Carol", carol_preferences) 
 
Automatic namespace routing in action 
The power of Amazon Bedrock AgentCore Memory lies in its automatic namespace routing. When the SRE agent creates events, it only needs to provide the actor_id‚ÄîAmazon Bedrock AgentCore Memory automatically determines which namespaces the event belongs to: 
 
 # During investigation, the supervisor agent stores context
memory_client.create_event(
    memory_id="sre_agent_memory-abc123",
    actor_id="Alice",  # AgentCore Memory routes this automatically
    session_id="investigation_2025_01_15",
    messages=[("investigation_started", "USER")]
)

# Memory system automatically:
# 1. Checks strategy namespaces &lt;!-- "all" is necessary here for technical accuracy --&gt;
# 2. Matches actor_id "Alice" to /sre/users/Alice/preferences
# 3. Stores event in User Preferences Strategy
# 4. Makes event available for future retrievals 
 
Validate the personalized investigation experience 
The memory component‚Äôs impact becomes clear when both Alice and Carol investigate the same issue. Using identical technical findings, the solution produces completely different presentations of the same underlying content. 
Alice‚Äôs technical report contains detailed systematic analysis for technical teams: 
 
 Technical Investigation Summary

Root Cause: Payment processor memory leak causing OOM kills

Analysis:
- Pod restart frequency increased 300% at 14:23 UTC
- Memory utilization peaked at 8.2GB (80% of container limit)
- JVM garbage collection latency spiked to 2.3s

Next Step:
1. Implement heap dump analysis (`kubectl exec payment-pod -- jmap`)
2. Review recent code deployments for memory management changes
3. Consider increasing memory limits and implementing graceful shutdown 
 
Carol‚Äôs executive summary contains business impact focused for executive stakeholders: 
 
 Business Impact Assessment
Status: CRITICAL - Customer payment processing degraded
Impact: 23% transaction failure rate, $47K revenue at risk
Timeline: Issue detected 14:23 UTC, resolution ETA 45 minutes
Business Actions: - Customer communication initiated via status page - Finance team alerted for revenue impact tracking - Escalating to VP Engineering if not resolved by 15:15 UTC 
 
The memory component enables this personalization while continuously learning from each investigation, building organizational knowledge that improves incident response over time. 
Deploy to production with Amazon Bedrock AgentCore Runtime 
Amazon Bedrock AgentCore makes it straightforward to deploy existing agents to production. The process involves three key steps: containerizing your agent, deploying to Amazon Bedrock AgentCore Runtime, and invoking the deployed agent. 
Containerize your agent 
Amazon Bedrock AgentCore Runtime requires ARM64 containers. The following code shows the complete Dockerfile: 
 
 # Use uv's ARM64 Python base image
FROM --platform=linux/arm64 ghcr.io/astral-sh/uv:python3.12-bookworm-slim

WORKDIR /app

# Copy uv files
COPY pyproject.toml uv.lock ./

# Install dependencies
RUN uv sync --frozen --no-dev

# Copy SRE agent module
COPY sre_agent/ ./sre_agent/

# Set environment variables
# Note: Set DEBUG=true to enable debug logging and traces
ENV PYTHONPATH="/app" \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

# Expose port
EXPOSE 8080

# Run application with OpenTelemetry instrumentation
CMD ["uv", "run", "opentelemetry-instrument", "uvicorn", "sre_agent.agent_runtime:app", "--host", "0.0.0.0", "--port", "8080"] 
 
Existing agents just need a FastAPI wrapper (agent_runtime:app) to become compatible with Amazon Bedrock AgentCore, and we add opentelemetry-instrument to enable observability through Amazon Bedrock AgentCore. 
Deploy to Amazon Bedrock AgentCore Runtime 
Deploying to Amazon Bedrock AgentCore Runtime is straightforward with the deploy_agent_runtime.py script: 
 
 import boto3

# Create AgentCore client
client = boto3.client('bedrock-agentcore', region_name=region)

# Environment variables for your agent
env_vars = {
    'GATEWAY_ACCESS_TOKEN': gateway_access_token,
    'LLM_PROVIDER': llm_provider,
    'ANTHROPIC_API_KEY': anthropic_api_key  # if using Anthropic
}

# Deploy container to AgentCore Runtime
response = client.create_agent_runtime(
    agentRuntimeName=runtime_name,
    agentRuntimeArtifact={
        'containerConfiguration': {
            'containerUri': container_uri  # Your ECR container URI
        }
    },
    networkConfiguration={"networkMode": "PUBLIC"},
    roleArn=role_arn,
    environmentVariables=env_vars
)

print(f"Agent Runtime ARN: {response['agentRuntimeArn']}") 
 
Amazon Bedrock AgentCore handles the infrastructure, scaling, and session management automatically. 
Invoke your deployed agent 
Calling your deployed agent is just as simple with invoke_agent_runtime.py: 
 
 # Prepare your query with user_id and session_id for memory personalization
payload = json.dumps({
    "input": {
        "prompt": "API response times have degraded 3x in the last hour",
        "user_id": "Alice",  # User for personalized investigation
        "session_id": "investigation-20250127-123456"  # Session for context
    }
})

# Invoke the deployed agent
response = agent_core_client.invoke_agent_runtime(
    agentRuntimeArn=runtime_arn,
    runtimeSessionId=session_id,
    payload=payload,
    qualifier="DEFAULT"
)

# Get the response
response_data = json.loads(response['response'].read())
print(response_data)  # Full response includes output with agent's investigation 
 
Key benefits of Amazon Bedrock AgentCore Runtime 
Amazon Bedrock AgentCore Runtime offers the following key benefits: 
 
 Zero infrastructure management ‚Äì No servers, load balancers, or scaling to configure 
 Built-in session isolation ‚Äì Each conversation is completely isolated 
 AWS IAM integration ‚Äì Secure access control without custom authentication 
 Automatic scaling ‚Äì Scales from zero to thousands of concurrent sessions 
 
The complete deployment process, including building containers and handling AWS permissions, is documented in the Deployment Guide. 
Real-world use cases 
Let‚Äôs explore how the SRE agent handles common incident response scenarios with a real investigation. 
When facing a production issue, you can query the system in natural language. The solution uses Amazon Bedrock AgentCore Memory to personalize the investigation based on your role and preferences: 
 
 export USER_ID=Alice
sre-agent --prompt "API response times have degraded 3x in the last hour" 
 
The supervisor retrieves Alice‚Äôs preferences from memory (detailed systematic analysis style) and creates an investigation plan tailored to her role as a Technical SRE: 
 
 Investigation Plan
1. Use metrics_agent to analyze API performance metrics including response times, error rates, and resource utilization to identify the extent and pattern of slowdown
2. Use logs_agent to examine application logs for errors related to slow API responses, focusing on database connection issues and memory errors
3. Use kubernetes_agent to check pod status and resource constraints, especially for web-service and database pods, looking for CrashLoopBackOff states and missing ConfigMaps
Complexity: Simple
Auto-execute: Yes
Agents involved: Metrics Agent, Logs Agent, Kubernetes Agent 
 
The agents investigate sequentially according to the plan, each contributing their specialized analysis. The solution then aggregates these findings into a comprehensive executive summary: 
 
 Executive Summary
Key Insights
- Root Cause: Database service failure due to missing ConfigMap 'database-config' in production namespace, causing database pod to crash repeatedly
- Impact: Severe performance degradation with API response times increased from 150ms to 5000ms (33x slower)
- Severity: High - Database unavailability, memory exhaustion (100%), and CPU saturation (95%) causing 75% error rate
Next Steps
1. Immediate (&lt; 1 hour): Create/update ConfigMap 'database-config' in production namespace and restart database pod
2. Short-term (&lt; 24 hours): 
   - Fix permissions on '/var/lib/postgresql/data' directory
   - Increase Java heap space for web-service to address OutOfMemoryErrors
   - Optimize UserService.loadAllUsers method causing memory issues
3. Long-term (&lt; 1 week): 
   - Implement resource monitoring with alerts for CPU (&gt;80%), memory (&gt;90%)
   - Optimize slow database queries, particularly "SELECT * FROM users WHERE status='active'"
   - Scale up resources or implement autoscaling for web-service
Critical Alerts
- Database pod (database-pod-7b9c4d8f2a-x5m1q) in CrashLoopBackOff state
- Web-service experiencing OutOfMemoryErrors in UserService.loadAllUsers(UserService.java:45)
- Node-3 experiencing memory pressure (&gt;85% usage)
- Web-app-deployment showing readiness probe failures with 503 errors
Troubleshooting Steps
1. Verify ConfigMap status: `kubectl get configmap database-config -n production`
2. Check database pod logs: `kubectl logs database-pod-7b9c4d8f2a-x5m1q -n production`
3. Create/update ConfigMap: `kubectl create configmap database-config --from-file=database.conf -n production`
4. Fix data directory permissions: `kubectl exec database-pod-7b9c4d8f2a-x5m1q -n production -- chmod -R 700 /var/lib/postgresql/data`
5. Restart database pod: `kubectl delete pod database-pod-7b9c4d8f2a-x5m1q -n production` 
 
This investigation demonstrates how Amazon Bedrock AgentCore primitives work together: 
 
 Amazon Bedrock AgentCore Gateway ‚Äì Provides secure access to infrastructure APIs through MCP tools 
 Amazon Bedrock AgentCore Identity ‚Äì Handles ingress and egress authentication 
 Amazon Bedrock AgentCore Runtime ‚Äì Hosts the multi-agent solution with automatic scaling 
 Amazon Bedrock AgentCore Memory ‚Äì Personalizes Alice‚Äôs experience and stores investigation knowledge for future incidents 
 Amazon Bedrock AgentCore Observability ‚Äì Captures detailed metrics and traces in CloudWatch for monitoring and debugging 
 
The SRE agent demonstrates intelligent agent orchestration, with the supervisor routing work to specialists based on the investigation plan. The solution‚Äôs memory capabilities make sure each investigation builds organizational knowledge and provides personalized experiences based on user roles and preferences. 
This investigation showcases several key capabilities: 
 
 Multi-source correlation ‚Äì It connects database configuration issues to API performance degradation 
 Sequential investigation ‚Äì Agents work systematically through the investigation plan while providing live updates 
 Source attribution ‚Äì Findings include the specific tool and data source 
 Actionable insights ‚Äì It provides a clear timeline of events and prioritized recovery steps 
 Cascading failure detection ‚Äì It can help show how one failure propagates through the system 
 
Business impact 
Organizations implementing AI-powered SRE assistance report significant improvements in key operational metrics. Initial investigations that previously took 30‚Äì45 minutes can now be completed in 5‚Äì10 minutes, providing SREs with comprehensive context before diving into detailed analysis. This dramatic reduction in investigation time translates directly to faster incident resolution and reduced downtime.The solution improves how SREs interact with their infrastructure. Instead of navigating multiple dashboards and tools, engineers can ask questions in natural language and receive aggregated insights from relevant data sources. This reduction in context switching enables teams to maintain focus during critical incidents and reduces cognitive load during investigations.Perhaps most importantly, the solution democratizes knowledge across the team. All team members can access the same comprehensive investigation techniques, reducing dependency on tribal knowledge and on-call burden. The consistent methodology provided by the solution makes sure investigation approaches remain uniform across team members and incident types, improving overall reliability and reducing the chance of missed evidence. 
The automatically generated investigation reports provide valuable documentation for post-incident reviews and help teams learn from each incident, building organizational knowledge over time. Furthermore, the solution extends existing AWS infrastructure investments, working alongside services like Amazon CloudWatch, AWS Systems Manager, and other AWS operational tools to provide a unified operational intelligence system. 
Extending the solution 
The modular architecture makes it straightforward to extend the solution for your specific needs. 
For example, you can add specialized agents for your domain: 
 
 Security agent ‚Äì For compliance checks and security incident response 
 Database agent ‚Äì For database-specific troubleshooting and optimization 
 Network agent ‚Äì For connectivity and infrastructure debugging 
 
You can also replace the demo APIs with connections to your actual systems: 
 
 Kubernetes integration ‚Äì Connect to your cluster APIs for pod status, deployments, and events 
 Log aggregation ‚Äì Integrate with your log management service (Elasticsearch, Splunk, CloudWatch Logs) 
 Metrics platform ‚Äì Connect to your monitoring service (Prometheus, Datadog, CloudWatch Metrics) 
 Runbook repository ‚Äì Link to your operational documentation and playbooks stored in wikis, Git repositories, or knowledge bases 
 
Clean up 
To avoid incurring future charges, use the cleanup script to remove the billable AWS resources created during the demo: 
 
 # Complete cleanup - deletes AWS resources and local files
./scripts/cleanup.sh 
 
This script automatically performs the following actions: 
 
 Stop backend servers 
 Delete the gateway and its targets 
 Delete Amazon Bedrock AgentCore Memory resources 
 Delete the Amazon Bedrock AgentCore Runtime 
 Remove generated files (gateway URIs, tokens, agent ARNs, memory IDs) 
 
For detailed cleanup instructions, refer to Cleanup Instructions. 
Conclusion 
The SRE agent demonstrates how multi-agent systems can transform incident response from a manual, time-intensive process into a time-efficient, collaborative investigation that provides SREs with the insights they need to resolve issues quickly and confidently. 
By combining the enterprise-grade infrastructure of Amazon Bedrock AgentCore with standardized tool access in MCP, we‚Äôve created a foundation that can adapt as your infrastructure evolves and new capabilities emerge. 
The complete implementation is available in our GitHub repository, including demo environments, configuration guides, and extension examples. We encourage you to explore the solution, customize it for your infrastructure, and share your experiences with the community. 
To get started building your own SRE assistant, refer to the following resources: 
 
 Automate tasks in your application using AI agents 
 Amazon Bedrock AgentCore Samples GitHub repository 
 Model Context Protocol documentation 
 LangGraph documentation 
 
 
About the authors 
Amit Arora is an AI and ML Specialist Architect at Amazon Web Services, helping enterprise customers use cloud-based machine learning services to rapidly scale their innovations. He is also an adjunct lecturer in the MS data science and analytics program at Georgetown University in Washington, D.C. 
Dheeraj Oruganty is a Delivery Consultant at Amazon Web Services. He is passionate about building innovative Generative AI and Machine Learning solutions that drive real business impact. His expertise spans Agentic AI Evaluations, Benchmarking and Agent Orchestration, where he actively contributes to research advancing the field. He holds a master‚Äôs degree in Data Science from Georgetown University. Outside of work, he enjoys geeking out on cars, motorcycles, and exploring nature.
‚Ä¢ DoWhile loops now supported in Amazon Bedrock Flows
  Today, we are excited to announce support for DoWhile loops in Amazon Bedrock Flows. With this powerful new capability, you can create iterative, condition-based workflows directly within your Amazon Bedrock flows, using Prompt nodes, AWS Lambda functions, Amazon Bedrock Agents, Amazon Bedrock Flows inline code, Amazon Bedrock Knowledge Bases, Amazon Simple Storage Service (Amazon S3), and other Amazon Bedrock nodes within the loop structure. This feature avoids the need for complex workarounds, enabling sophisticated iteration patterns that use the full range of Amazon Bedrock Flows components. Tasks like content refinement, recursive analysis, and multi-step processing can now seamlessly integrate AI model calls, custom code execution, and knowledge retrieval in repeated cycles. By providing loop support with diverse node types, this feature simplifies generative AI application development and accelerates enterprise adoption of complex, adaptive AI solutions. 
Organizations using Amazon Bedrock Flows can now use DoWhile loops to design and deploy workflows for building more scalable and efficient generative AI applications fully within the Amazon Bedrock environment while achieving the following: 
 
 Iterative processing ‚Äì Execute repeated operations until specific conditions are met, enabling dynamic content refinement and recursive improvements 
 Conditional logic ‚Äì Implement sophisticated decision-making within flows based on AI outputs and business rules 
 Complex use cases ‚Äì Manage multi-step generative AI workflows that require repeated execution and refinement 
 Builder-friendly ‚Äì Create and manage loops through both the Amazon Bedrock API and AWS Management Console in the traces 
 Observability ‚Äì Employ seamless tracking of loop iterations, conditions, and execution paths 
 
In this post, we discuss the benefits of this new feature, and show how to use DoWhile loops in Amazon Bedrock Flows. 
Benefits of DoWhile loops in Amazon Bedrock Flows 
Using DoWhile loops in Amazon Bedrock Flows offers the following benefits: 
 
 Simplified flow control ‚Äì Create sophisticated iterative workflows without complex orchestration or external services 
 Flexible processing ‚Äì Enable dynamic, condition-based execution paths that can adapt based on AI outputs and business rules 
 Enhanced development experience ‚Äì Help users build complex iterative workflows through an intuitive interface, without requiring external workflow management 
 
Solution overview 
In the following sections, we show how to create a simple Amazon Bedrock flow using Do-while loops with Lambda functions. Our example showcases a practical application where we construct a flow that generates a blog post on a given topic in an iterative manner until certain acceptance criteria are fulfilled. The flow demonstrates the power of combining different types of Amazon Bedrock Flows nodes within a loop structure, where Prompt nodes generate and fine-tune the blog post, Inline Code nodes allow writing custom Python code to analyze the outputs, and S3 Storage nodes enable storing each version of the blog post during the process for reference. The DoWhile loop continues to execute until the quality of the blog post meets the condition set in the loop controller. This example illustrates how different flow nodes can work together within a loop to progressively transform data until desired conditions are met, providing a foundation for understanding more complex iterative workflows with various node combinations. 
Prerequisites 
Before implementing the new capabilities, make sure you have the following: 
 
 An AWS account 
 Other Amazon Bedrock services in place: 
   
   Create and test your base prompts for customer service interactions in Amazon Bedrock Prompt Management 
   Create guardrails with relevant rules using Amazon Bedrock Guardrails 
    
 Resources in auxiliary AWS services needed for your workflow, such as Lambda, Amazon DynamoDB, and Amazon S3 
 Required AWS Identity and Access Management (IAM) permissions: 
   
   Access to Amazon Bedrock Flows 
   Appropriate access to large language models (LLMs) in Amazon Bedrock 
    
 
After these components are in place, you can proceed with using Amazon Bedrock Flows with DoWhile loop capabilities in your generative AI use case. 
Create your flow using DoWhile Loop nodes 
Complete the following steps to create your flow: 
 
 On the Amazon Bedrock console, choose Flows under Builder tools in the navigation pane. 
 Create a new flow, for example, dowhile-loop-demo. For detailed instructions on creating a flow, see Amazon Bedrock Flows is now generally available with enhanced safety and traceability. 
 Add a DoWhile loop node. 
 Add additional nodes according to the solution workflow (discussed in the next section). 
 
Amazon Bedrock provides different node types to build your prompt flow. For this example, we use a DoWhile Loop node for calling different types of nodes for a generative AI-powered application, which creates a blog post on a given topic and checks the quality in every loop. There is one DoWhile Loop node in the flow. This new node type is on the Nodes tab in the left pane, as shown in the following screenshot. 
 
DoWhile loop workflow 
A DoWhile loop consists of two parts: the loop and the loop controller. The loop controller validates the logic for the loop and decides whether to continue or exit the loop. In this example, it is executing Prompt, Inline Code, S3 Storage nodes each time the loop is executed. 
Let‚Äôs go through this flow step-by-step, as illustrated in the preceding screenshot: 
 
 A user asks to write a blog post on a specific topic (for example, using the following prompt: {‚Äútopic‚Äù: ‚ÄúAWS Lambda‚Äù, ‚ÄúAudience‚Äù: ‚ÄúChief Technology Officer‚Äù, ‚Äúword_count‚Äù:‚Äù500}). This prompt is sent to the Prompt node (Content_Generator). 
 The Prompt node (Content_Generator) writes a blog post based on the prompt using one of the Amazon Bedrock provided LLMs (such as Amazon Nova or Anthropic‚Äôs Claude) and is sent to the Loop Input node. This is the entry point to the DoWhile Loop node. 
 Three steps happen in tandem: 
   
   The Loop Input node forwards the blog post content to another Prompt node (Blog_Analysis_Rating) for rating the post based on criteria mentioned as part of the prompt. The output of this Prompt node is JSON code like the following example. The output of a Prompt node is always of type String. You can modify the prompt to get different types of output according to your needs. However, you can also ask the LLM to output a single rating number. 
     
     {
  "overall_rating": 8.5,
  "category_ratings": {
    "clarity_and_readability": 9,
    "value_to_target_audience": 8,
    "engagement_level": 8,
    "technical_accuracy": 9
  } 
      
   The blog post is sent to the flow output during every iteration. This is the final version whenever the loop condition is not met (exiting the loop) or the end of maximum loop iterations. 
   At the same time, the output of the previous Prompt node (Content_Generator) is forwarded to another Prompt node (Blog_Refinement) by the Loop Input node. This node recreates or modifies the blog post based on the feedback from the analysis. 
    
 The output of the Prompt node (Blog_Analysis_Rating) is fed into the Inline Code node to extract the necessary rating and return that as a number or other information required for checking the condition inside the loop controller as input variables (for example, a rating). 
 
 
 def __func(variable):
 return float(variable["overall_rating"])
__func(variable) 
 
Python code inside the Inline Code must be treated as untrusted, and appropriate parsing, validation, and data handling should be implemented. 
 
 The output of the Inline Code node is fed into the loop condition inside the loop controller to validate against the condition we set up inside the continue loop. In this example, we are checking for a rating less than or equal to 9 for the generated blog post. You can check up to five conditions. Additionally, a maximum loop iterations parameter makes sure that loop doesn‚Äôt continue infinitely. 
 The step consists of two parts: 
   
   A Prompt node (Blog_Refinement) forwards the newly generated blog post to loopinput inside the loop controller. 
   The loop controller stores the version of the post in Amazon S3 for future reference and comparing the different versions generated. 
    
 This path will execute if one of the conditions is met inside the continue loop and maximum loop iterations. If this continues, then the new modified blog post from earlier is forwarded to the input field in the Loop Input node as LoopInput and the loop continues. 
 The final output is produced after the DoWhile loop condition is met or maximum number of iterations are completed. The output will be final version of the blog post. 
 
You can see the output as shown in the following screenshot. The system also provides access to node execution traces, offering detailed insights into each processing step, real-time performance metrics, and highlighting issues that may have occurred during the flow‚Äôs execution. Traces can be enabled using an API and sent to an Amazon CloudWatch log. In the API, set the enableTrace field to true in an InvokeFlow request. Each flowOutputEvent in the response is returned alongside a flowTraceEvent. 
 
You have now successfully created and executed an Amazon Bedrock flow using DoWhile Loop nodes. You can also use Amazon Bedrock APIs to programmatically execute this flow. For additional details on how to configure flows, see Amazon Bedrock Flows is now generally available with enhanced safety and traceability. 
Considerations 
When working with DoWhile Loop nodes in Amazon Bedrock Flows, the following are the important things to note: 
 
 DoWhile Loop nodes don‚Äôt support nested loops (loops within loops) 
 Each loop controller can evaluate up to five input conditions for its exit criteria 
 A maximum iteration limit must be specified to help prevent infinite loops and enable controlled execution 
 
Conclusion 
The integration of DoWhile loops in Amazon Bedrock Flows marks a significant advancement in iterative workflow capabilities, enabling sophisticated loop-based processing that can incorporate Prompt nodes, Inline Code nodes, S3 Storage nodes, Lambda functions, agents, DoWhile Loop nodes, and Knowledge Base nodes. This enhancement responds directly to enterprise customers‚Äô needs for handling complex, repetitive tasks within their AI workflows, helping developers create adaptive, condition-based solutions without requiring external orchestration tools. By providing support for iterative processing patterns, DoWhile loops help organizations build more sophisticated AI applications that can refine outputs, perform recursive operations, and implement complex business logic directly within the Amazon Bedrock environment. This powerful addition to Amazon Bedrock Flows democratizes the development of advanced AI workflows, making iterative AI processing more accessible and manageable across organizations. 
DoWhile loops in Amazon Bedrock Flows are now available in all the AWS Regions where Amazon Bedrock Flows is supported, except for the AWS Gov Cloud (US) Region. To get started, open the Amazon Bedrock console or Amazon Bedrock APIs to begin building flows with Amazon Bedrock Flows. To learn more, refer to Create your first flow in Amazon Bedrock and Track each step in your flow by viewing its trace in Amazon Bedrock. 
We‚Äôre excited to see the innovative applications you will build with these new capabilities. As always, we welcome your feedback through AWS re:Post for Amazon Bedrock or your usual AWS contacts. Join the generative AI builder community at community.aws to share your experiences and learn from others. 
 
About the authors 
Shubhankar Sumar is a Senior Solutions Architect at AWS, where he specializes in architecting generative AI-powered solutions for enterprise software and SaaS companies across the UK. With a strong background in software engineering, Shubhankar excels at designing secure, scalable, and cost-effective multi-tenant systems on the cloud. His expertise lies in seamlessly integrating cutting-edge generative AI capabilities into existing SaaS applications, helping customers stay at the forefront of technological innovation. 
Jesse Manders is a Senior Product Manager on Amazon Bedrock, the AWS Generative AI developer service. He works at the intersection of AI and human interaction with the goal of creating and improving generative AI products and services to meet our needs. Previously, Jesse held engineering team leadership roles at Apple and Lumileds, and was a senior scientist in a Silicon Valley startup. He has an M.S. and Ph.D. from the University of Florida, and an MBA from the University of California, Berkeley, Haas School of Business. 
Eric Li is a Software Development Engineer II at AWS, where he builds core capabilities for Amazon Bedrock and SageMaker to support generative AI applications at scale. His work focuses on designing secure, observable, and cost-efficient systems that help developers and enterprises adopt generative AI with confidence. He is passionate about advancing developer experiences for building with large language models, making it easier to integrate AI into production-ready cloud applications.
‚Ä¢ How PropHero built an intelligent property investment advisor with continuous evaluation using Amazon Bedrock
  This post was written with Lucas Dahan, Dil Dolkun, and Mathew Ng from PropHero. 
PropHero is a leading property wealth management service that democratizes access to intelligent property investment advice through big data, AI, and machine learning (ML). For the Spanish and Australian consumer base, PropHero needed an AI-powered advisory system that could engage customers in accurate property investment discussions. The goal was to provide personalized investment insights and to guide and assist users at every stage of their investment journey: from understanding the process, gaining visibility into timelines, securely uploading documents, to tracking progress in real time. 
PropHero collaborated with the AWS Generative AI Innovation Center to implement an intelligent property investment advisor using AWS generative AI services with continuous evaluation. The solution helps users engage in natural language conversations about property investment strategies and receive personalized recommendations based on PropHero‚Äôs comprehensive market knowledge. 
In this post, we explore how we built a multi-agent conversational AI system using Amazon Bedrock that delivers knowledge-grounded property investment advice. We explore the agent architecture, model selection strategy, and comprehensive continuous evaluation system that facilitates quality conversations while facilitating rapid iteration and improvement. 
The challenge: Making property investment knowledge more accessible 
The area of property investment presents numerous challenges for both novice and experienced investors. Information asymmetry creates barriers where comprehensive market data remains expensive or inaccessible. Traditional investment processes are manual, time-consuming, and require extensive market knowledge to navigate effectively. For the Spanish and Australian consumers specifically, we needed to build a solution that could provide accurate, contextually relevant property investment advice in Spanish while handling complex, multi-turn conversations about investment strategies. The system needed to maintain high accuracy while delivering responses at scale, continuously learning and improving from customer interactions. Most importantly, it needed to assist users across every phase of their journey, from initial onboarding through to final settlement, ensuring comprehensive support throughout the entire investment process. 
Solution overview 
We built a complete end-to-end solution using AWS generative AI services, architected around a multi-agent AI advisor with integrated continuous evaluation. The system provides seamless data flow from ingestion through intelligent advisory conversations with real-time quality monitoring. The following diagram illustrates this architecture. 
 
The solution architecture consists of four virtual layers, each serving specific functions in the overall system design. 
Data foundation layer 
The data foundation provides the storage and retrieval infrastructure for system components: 
 
 Amazon DynamoDB ‚Äì Fast storage for conversation history, evaluation metrics, and user interaction data 
 Amazon Relational Database (Amazon RDS) for PostgreSQL ‚Äì A PostgreSQL database storing LangFuse observability data, including large language model (LLM) traces and latency metrics 
 Amazon Simple Storage Service (Amazon S3) ‚Äì A central data lake storing Spanish FAQ documents, property investment guides, and conversation datasets 
 
Multi-agent AI layer 
The AI processing layer encompasses the core intelligence components that power the conversational experience: 
 
 Amazon Bedrock ‚Äì Foundation models (FMs) such as LLMs and rerankers powering specialized agents 
 Amazon Bedrock Knowledge Bases ‚Äì Semantic search engine with semantic chunking for FAQ-style content 
 LangGraph ‚Äì Orchestration of multi-agent workflows and conversation state management 
 AWS Lambda ‚Äì Serverless functions executing multi-agent logic and retrival of user information for richer context 
 
Continuous evaluation layer 
The evaluation infrastructure facilitates continuous quality monitoring and improvement through these components: 
 
 Amazon CloudWatch ‚Äì Real-time monitoring of quality metrics with automated alerting and threshold management 
 Amazon EventBridge ‚Äì Real-time event triggers for conversation completion and quality assessment 
 AWS Lambda ‚Äì Automated evaluation functions measuring context relevance, response groundedness, and goal accuracy 
 Amazon QuickSight ‚Äì Interactive dashboards and analytics for monitoring the respective metrics 
 
Application and integration layer 
The integration layer provides secure interfaces for external communication: 
 
 Amazon API Gateway ‚Äì Secure API endpoints for conversational interface and evaluation webhooks 
 
Multi-agent AI advisor architecture 
The intelligent advisor uses a multi-agent system orchestrated through LangGraph, which sits in a single Lambda function, where each agent is optimized for specific tasks. The following diagram shows the communication flow among the various agents within the Lambda function. 
 
Agent composition and model selection 
Our model selection strategy involved extensive testing to match each component‚Äôs computational requirements with the most cost-effective Amazon Bedrock model. We evaluated factors including response quality, latency requirements, and cost per token to determine optimal model assignments for each agent type.Each component in the system uses the most appropriate model for its designated function, as outlined in the following table. 
 
  
   
   Component 
   Amazon Bedrock Model 
   Purpose 
   
   
   Router Agent 
   Anthropic Claude 3.5 Haiku 
   Query classification and routing 
   
   
   General Agent 
   Amazon Nova Lite 
   Common questions and conversation management 
   
   
   Advisor Agent 
   Amazon Nova Pro 
   Specialized property investment advice 
   
   
   Settlement agent 
   Anthropic Claude 3.5 Haiku 
   Customer support specialising on pre-settlement phase of investment 
   
   
   Response Agent 
   Amazon Nova Lite 
   Final response generation and formatting 
   
   
   Embedding 
   Cohere Embed Multilingual v3 
   Context retrieval 
   
   
   Retriever 
   Cohere Rerank 3.5 
   Context retrieval and ranking 
   
   
   Evaluator 
   Anthropic Claude 3.5 Haiku 
   Quality assessment and scoring 
   
  
 
End-to-end conversation flow 
The conversation processing follows a structured workflow that facilitates accurate responses while maintaining quality standards: 
 
 User queries enter through API Gateway and are routed to the router agent. 
 The router agent determines the appropriate specialized agent based on query analysis. 
 User information is retrieved at the start for richer context and knowledge-intensive queries trigger the retriever to access the Amazon Bedrock knowledge base. 
 Specialized agents process queries with retrieved user information and relevant context from the knowledge base. 
 The response agent formats and generates the final user-facing response with the appropriate tone. 
 Parallel evaluation processes assess context relevance, response groundedness, and goal accuracy. 
 Conversation data is stored in DynamoDB for analysis and improvement. 
 
Amazon Bedrock Knowledge Bases configuration 
The knowledge base uses several AWS services for optimal performance: 
 
 Data source ‚Äì S3 bucket 
 Chunking strategy ‚Äì Semantic chunking optimized for FAQ-style content 
 Embedding model ‚Äì Cohere Embed Multilingual v3 for Spanish understanding 
 Reranker ‚Äì Cohere Rerank 3.5 for reranking retrieved Spanish content 
 Vector database ‚Äì Amazon OpenSearch Serverless for scalable semantic search 
 
Sample conversation experience 
The system handles natural Spanish conversations seamlessly. For example: 
Usuario: ‚ÄúHola, ¬øqu√© es PropHero exactamente?‚Äù 
Asistente: ‚Äú¬°Hola! PropHero es una plataforma que te permite crear, optimizar y crecer tu patrimonio inmobiliario delegando todo el proceso en nuestro equipo de profesionales‚Ä¶‚Äù 
Usuario: ‚Äú¬øY c√≥mo funciona en la pr√°ctica?‚Äù 
Asistente: ‚ÄúEs muy sencillo. Comenzamos con una sesi√≥n con tu Property Coach para definir tu estrategia de inversi√≥n personalizada‚Ä¶‚Äù 
Integrated continuous evaluation system 
The continuous evaluation system is integrated into the architecture, operating as a core component. This approach supports quality monitoring in real-time alongside conversation processing. 
Evaluation metrics 
We used the following metrics from the Ragas library for evaluation: 
 
 Context Relevance (0‚Äì1) ‚Äì Measures the relevance of retrieved context to user queries, evaluating RAG system effectiveness 
 Response Groundedness (0‚Äì1) ‚Äì Makes sure responses are factually accurate and derived from PropHero‚Äôs official information 
 Agent Goal Accuracy (0‚Äì1) ‚Äì Binary measure of whether responses successfully address user investment goals 
 
Real-time evaluation workflow 
The evaluation system operates seamlessly within the conversation architecture: 
 
 Amazon DynamoDB Streams triggers ‚Äì Conversation data written to DynamoDB automatically triggers a Lambda function for evaluation through Amazon DynamoDB Streams 
 Parallel processing ‚Äì Lambda functions execute evaluation logic in parallel with response delivery 
 Multi-dimensional assessment ‚Äì Each conversation is evaluated across three key dimensions simultaneously 
 Intelligent scoring with LLM-as-a-judge ‚Äì Anthropic‚Äôs Claude 3.5 Haiku provides consistent evaluation as an LLM judge, offering standardized assessment criteria across conversations. 
 Monitoring and analytics ‚Äì CloudWatch captures metrics from the evaluation process, and QuickSight provides dashboards for trend analysis 
 
The following diagram provides an overview of the Lambda function responsible for continuous evaluation. 
 
Implementation insights and best practices 
Our development journey involved a 6-week iterative process with PropHero‚Äôs technical team. We conducted testing across different model combinations and evaluated chunking strategies using real customer FAQ data. This journey revealed several architectural optimizations that enhanced system performance, achieved significant cost reductions, and improved user experience. 
Model selection strategy 
Our approach to model selection demonstrates the importance of matching model capabilities to specific tasks. By using Amazon Nova Lite for simpler tasks and Amazon Nova Pro for complex reasoning, the solution achieves optimal cost-performance balance while maintaining high accuracy standards. 
Chunking and retrieval optimization 
Semantic chunking proved superior to hierarchical and fixed chunking approaches for FAQ-style content. The Cohere Rerank 3.5 model enabled the system to use fewer chunks (10 vs. 20) while maintaining accuracy, reducing latency and cost. 
Multilingual capabilities 
The system effectively handles Spanish and English queries by using FMs that support Spanish language on Amazon Bedrock. 
Business impact 
The PropHero AI advisor delivered measurable business value: 
 
 Enhanced customer engagement ‚Äì A 90% goal accuracy rate makes sure customers receive relevant, actionable property investment advice. Over 50% of our users (and over 70% of paid users) are actively using the AI advisor. 
 Operational efficiency ‚Äì Automated responses to common questions reduced customer service workload by 30%, freeing staff to focus on complex customer needs. 
 Scalable growth ‚Äì The serverless architecture automatically scales to handle increasing customer demand without manual intervention. 
 Cost optimization ‚Äì Strategic model selection achieved high performance while reducing AI costs by 60% compared to using premium models throughout. 
 Consumer base expansion ‚Äì Successful Spanish language support enabled PropHero‚Äôs expansion into the Spanish consumer base with localized expertise. 
 
Conclusion 
The PropHero AI advisor demonstrates how AWS generative AI services can be used to create intelligent, context-aware conversational agents that deliver real business value. By combining a modular agent architecture with a robust evaluation system, PropHero has created a solution that enhances customer engagement while providing accurate and relevant responses.The comprehensive evaluation pipeline has been particularly valuable, providing clear metrics for measuring conversation quality and guiding ongoing improvements. This approach makes sure the AI advisor will continue to evolve and improve over time.For more information about building multi-agent AI advisors with continuous evaluation, refer to the following resources: 
 
 Retrieve data and generate AI responses with Amazon Bedrock Knowledge Bases ‚Äì With Amazon Bedrock Knowledge Bases, you can implement semantic search with chunking strategies 
 LangGraph ‚Äì LangGraph can help you build multi-agent workflows 
 Ragas ‚Äì Ragas offers comprehensive LLM evaluation metrics, including context relevance, groundedness, and goal accuracy used in this implementation 
 
To learn more about the Generative AI Innovation Center, get in touch with your account team. 
 
About the authors 
Adithya Suresh is a Deep Learning Architect at the AWS Generative AI Innovation Center based in Sydney, where he collaborates directly with enterprise customers to design and scale transformational generative AI solutions for complex business challenges. He uses AWS generative AI services to build bespoke AI systems that drive measurable business value across diverse industries. 
Lucas Dahan was the Head of Data &amp; AI at PropHero at the time of writing. He leads the technology team that is transforming property investment through innovative digital solutions. 
 Dil Dolkun is the Data &amp; AI Engineer at PropHero‚Äôs tech team, and has been instrumental in designing data architectures and multi-agent workflows for PropHero‚Äôs generative AI property investment Advisor system. 
Mathew Ng is a Technical Lead at PropHero, who architected and scaled PropHero‚Äôs cloud-native, high-performance software solution from early stage start up to successful Series A funding. 
Aaron Su is a Solutions Architect at AWS, with a focus across AI and SaaS startups. He helps early-stage companies architect scalable, secure, and cost-effective cloud solutions.
‚Ä¢ Accelerate benefits claims processing with Amazon Bedrock Data Automation
  In the benefits administration industry, claims processing is a vital operational pillar that makes sure employees and beneficiaries receive timely benefits, such as health, dental, or disability payments, while controlling costs and adhering to regulations like HIPAA and ERISA. Businesses aim to optimize the workflow‚Äîcovering claim submission, validation, adjudication, payment, and appeals‚Äîto enhance employee satisfaction, strengthen provider relationships, and mitigate financial risks. The process includes specific steps like claim submission (through portals or paper), data validation (verifying eligibility and accuracy), adjudication (assessing coverage against plan rules), payment or denial (including check processing for reimbursements), and appeal handling. Efficient claims processing supports competitive benefits offerings, which is crucial for talent retention and employer branding, but requires balancing speed, accuracy, and cost in a highly regulated environment. 
Despite its importance, claims processing faces significant challenges in many organizations. Most notably, the reliance on legacy systems and manual processes results in frustratingly slow resolution times, high error rates, and increased administrative costs. Incomplete or inaccurate claim submissions‚Äîsuch as those with missing diagnosis codes or eligibility mismatches‚Äîfrequently lead to denials and rework, creating frustration for both employees and healthcare providers. Additionally, fraud, waste, and abuse continue to inflate costs, yet detecting these issues without delaying legitimate claims remains challenging. Complex regulatory requirements demand constant system updates, and poor integration between systems‚Äîsuch as Human Resource Information Systems (HRIS) and other downstream systems‚Äîseverely limits scalability. These issues drive up operational expenses, erode trust in benefits programs, and overburden customer service teams, particularly during appeals processes or peak claims periods. 
Generative AI can help address these challenges. With Amazon Bedrock Data Automation, you can automate generation of useful insights from unstructured multimodal content such as documents, images, audio, and video. Amazon Bedrock Data Automation can be used in benefits claims process to automate document processing by extracting and classifying documents from claims packets, policy applications, and supporting documents with industry-leading accuracy, reducing manual errors and accelerating resolution times. Amazon Bedrock Data Automation natural language processing capabilities interpret unstructured data, such as provider notes, supporting compliance with plan rules and regulations. By automating repetitive tasks and providing insights, Amazon Bedrock Data Automation helps reduce administrative burdens, enhance experiences for both employees and providers, and support compliance in a cost-effective manner. Furthermore, its scalable architecture enables seamless integration with existing systems, improving data flow across HRIS, claims systems, and provider networks, and advanced analytics help detect fraud patterns to optimize cost control. 
In this post, we examine the typical benefit claims processing workflow and identify where generative AI-powered automation can deliver the greatest impact. 
Benefit claims processing 
When an employee or beneficiary pays out of pocket for an expense covered under their health benefits, they submit a claim for reimbursement. This process requires several supporting documents, including doctor‚Äôs prescriptions and proof of payment, which might include check images, receipts, or electronic payment confirmations. 
The claims processing workflow involves several critical steps: 
 
 Document intake and processing ‚Äì The system receives and categorizes submitted documentation, including: 
   
   Medical records and prescriptions 
   Proof of payment documentation 
   Supporting forms and eligibility verification 
    
 Payment verification processing ‚Äì For check-based reimbursements, the system must complete the following steps: 
   
   Extract information from check images, including the account number and routing number contained in the MICR line 
   Verify payee and payer names against the information provided during the claim submission process 
   Confirm payment amounts match the claimed expenses 
   Flag discrepancies for human review 
    
 Adjudication and reimbursement ‚Äì When verification is complete, the system performs several actions: 
   
   Determine eligibility based on plan rules and coverage limits 
   Calculate appropriate reimbursement amounts 
   Initiate payment processing through direct deposit or check issuance 
   Provide notification to the claimant regarding the status of their reimbursement 
    
 
In this post, we walk through a real-world scenario to make the complexity of this multi-step process clearer. The following example demonstrates how Amazon Bedrock Data Automation can streamline the claims processing workflow, from initial submission to final reimbursement. 
Solution overview 
Let‚Äôs consider a scenario where a benefit plan participant seeks treatment and pays out of pocket for the doctor‚Äôs fee using a check. They then buy the medications prescribed by the doctor at the pharmacy store. Later, they log in to their benefit provider‚Äôs portal and submit a claim along with the image of the check and payment receipt for the medications. 
This solution uses Amazon Bedrock Data Automation to automate the two most critical and time-consuming aspects of this workflow: document intake and payment verification processing. The following diagram illustrates the benefits claims processing architecture. 
 
The end-to-end process works through four integrated stages: ingestion, extraction, validation, and integration. 
Ingestion 
When a beneficiary uploads supporting documents (check image and pharmacy receipt) through the company‚Äôs benefit claims portal, these documents are securely saved in an Amazon Simple Storage Service (Amazon S3) bucket, triggering the automated claims processing pipeline. 
Extraction 
After documents are ingested, the system immediately begins with intelligent data extraction: 
 
 The S3 object upload triggers an AWS Lambda function, which invokes the Amazon Bedrock Data Automation project. 
 Amazon Bedrock Data Automation uses blueprints for file processing and extraction. Blueprints are artifacts used to configure file processing business logic by specifying a list of field names for data extraction, along with their desired data formats (string, number, or Boolean) and natural language context for data normalization and validation rules. Amazon Bedrock Data Automation provides a catalog of sample blueprints out of the box. You can create a custom blueprint for your unique document types that aren‚Äôt predefined in the catalog. This solution uses two blueprints designed for different document types, as shown in the following screenshot: 
   
   The catalog blueprint US-Bank-Check for check processing. 
   The custom blueprint benefit-claims-pharmacy-receipt-blueprint for pharmacy-specific receipts. 
    
 
 
US-Bank-Check is a catalog blueprint provided out of the box by Amazon Bedrock Data Automation. The custom blueprint benefit-claims-pharmacy-receipt-blueprint is created using an AWS CloudFormation template to handle pharmacy receipt processing, addressing a specific document type that wasn‚Äôt available in the standard blueprint catalog. The benefit administrator wants to look for vendor-specific information such as name, address, and phone details for benefits claims processing. The custom blueprint schema contains natural language explanation of those fields, such as VendorName, VendorAddress, VendorPhone, and additional fields, explaining what the field represents, expected data types, and inference type for each extracted field (explained in Creating Blueprints for Extraction), as shown in the following screenshot. 
 
3. The two blueprints are added to the Amazon Bedrock Data Automation project. An Amazon Bedrock Data Automation project is a grouping of both standard and custom blueprints that you can use to process different types of files (like documents, audio, and images) using specific configuration settings, where you can control what kind of information you want to extract from each file type. When the project is invoked asynchronously, it automatically applies the appropriate blueprint, extracts information such as confidence scores and bounding box details for each field, and saves results in a separate S3 bucket. This intelligent classification alleviates the need for you to write complex document classification logic. 
The following screenshot illustrates the document classification by the standard catalog blueprint US-Bank-Check. 
 
The following screenshot shows the document classification by the custom blueprint benefit-claims-pharmacy-receipt-blueprint. 
 
Validation 
With the data extracted, the system moves to the validation and decision-making process using the business rules specific to each document type. 
The business rules are documented in standard operating procedure documents (AnyCompany Benefit Checks Standard Operating procedure.docx and AnyCompany Benefit Claims Standard Operating procedure.docx) and uploaded to an S3 bucket. Then the system creates a knowledge base for Amazon Bedrock with the S3 bucket as the source, as shown in the following screenshot. 
 
When the extracted Amazon Bedrock Data Automation results are saved to the configured S3 bucket, a Lambda function is triggered automatically. Based on the business rules retrieved from the knowledge base for the specific document type and the extracted Amazon Bedrock Data Automation output, an Amazon Nova Lite large langue model (LLM) makes the automated approve/deny decision for claims. 
The following screenshot shows the benefit claim adjudication automated decision for US-Bank-Check. 
 
The following screenshot shows the benefit claim adjudication automated decision for benefit-claims-pharmacy-receipt-blueprint. 
 
Integration 
The system seamlessly integrates with existing business processes. 
When validation is complete, an event is pushed to Amazon EventBridge, which triggers a Lambda function for downstream integration. In this implementation, we use an Amazon DynamoDB table and Amazon Simple Notification Service (Amazon SNS) email for downstream integration. A DynamoDB table is created as part of the deployment stack, which is used to populate details including document classification, extracted data, and automated decision. An email notification is sent for both check and receipts after the final decision is made by the system. The following screenshot shows an example email for pharmacy receipt approval. 
 
This flexible architecture helps you integrate with your existing applications through internal APIs or events to update claim status or trigger additional workflows when validation fails. 
Reducing manual effort through intelligent business rules management 
Beyond automating document processing, this solution addresses a common operational challenge: Traditionally, customers must write and maintain code for handling business rules around claims adjudication and processing. Every business rule change requires development effort and code updates, slowing time-to-market and increasing maintenance overhead. 
Our approach converts business rules and standard operating procedures (SOPs) into knowledge bases using Amazon Bedrock Knowledge Bases, which you can use for automated decision-making. This approach can dramatically reduce time-to-market when business rules change, because updates can be made through knowledge management rather than code deployment. 
In the following sections, we walk you through the steps to deploy the solution to your own AWS account. 
Prerequisites 
To implement the solution provided in this post, you must have the following: 
 
 An AWS account 
 Access to Amazon Titan Text Embeddings V2 and Amazon Nova Lite foundation models (FMs) enabled in Amazon Bedrock 
 
This solution uses Python 3.13 with Boto3 1.38. or later version, and the AWS Serverless Application Model Command Line Interface (AWS SAM CLI) version 1.138.0. We assume that you have installed these in your local machine already. If not, refer to the following instructions: 
 
 Python 3.13 installation 
 Install the AWS SAM CLI 
 
Set up code in your local machine 
To set up the code, clone the GitHub repository. After you have cloned the repository to your local machine, the project folder structure will look like the following code, as mentioned in the README file: 
 
Deploy the solution in your account 
The sample code comes with a CloudFormation template that creates necessary resources. To deploy the solution in your account, follow the deployment instructions in the README file. 
Clean up 
Deploying this solution in your account will incur costs. Follow the cleanup instructions in the README file to avoid charges when you are done. 
Conclusion 
Benefits administration companies can significantly enhance their operations by automating claims processing using the solution outlined in this post. This strategic approach directly addresses the industry‚Äôs core challenges and can deliver several key advantages: 
 
 Enhanced processing efficiency through accelerated claims resolution times, reduced manual error rates, and higher straight-through processing rates that minimize the frustrating delays and manual rework plaguing legacy systems 
 Streamlined document integration and fraud detection capabilities, where adding new supporting documents becomes seamless through new Amazon Bedrock Data Automation blueprints, while AI-powered analytics identify suspicious patterns without delaying legitimate claims, avoiding traditional months-long development cycles and reducing costly fraud, waste, and abuse 
 Agile business rule management that enables rapid adaptation to changing HIPAA and ERISA requirements and modification of business rules, significantly reducing administrative costs and time-to-market while improving scalability and integration with existing HRIS and claims, ultimately enhancing employee satisfaction, strengthening provider relationships, and supporting competitive benefits offerings that are crucial for talent retention and employer branding 
 
To get started with this solution, refer to the GitHub repo. For more information about Amazon Bedrock Data Automation, refer to Transform unstructured data into meaningful insights using Amazon Bedrock Data Automation and try the Document Processing Using Amazon Bedrock Data Automation workshop. 
 
About the authors 
Saurabh Kumar is a Senior Solutions Architect at AWS based out of Raleigh, NC, with expertise in Resilience Engineering, Chaos Engineering, and Generative AI solutions. He advises customers on fault-tolerance strategies and generative AI-driven modernization approaches, helping organizations build robust architectures while leveraging generative AI technologies to drive innovation. 
Kiran Lakkireddy is a Principal Solutions Architect at AWS with expertise in Financial Services, Benefits Management and HR Services industries. Kiran provides technology and architecture guidance to customers in their business transformation, with a specialized focus on GenAI security, compliance, and governance. He regularly speaks to customer security leadership on GenAI security, compliance, and governance topics, helping organizations navigate the complex landscape of AI implementation while maintaining robust security standards. 
Tamilmanam Sambasivam is a Solutions Architect and AI/ML Specialist at AWS. She helps enterprise customers to solve their business problems by recommending the right AWS solutions. Her strong back ground in Information Technology (24+ years of experience) helps customers to strategize, develop and modernize their business problems in AWS cloud. In the spare time, Tamil like to travel and gardening.

‚∏ª